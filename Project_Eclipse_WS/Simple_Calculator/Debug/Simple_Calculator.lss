
Simple_Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000244e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  0000244e  000024e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080009e  0080009e  00002520  2**0
                  ALLOC
  3 .stab         00001fec  00000000  00000000  00002520  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fa9  00000000  00000000  0000450c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000054b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000055f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005765  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000073ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008299  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009048  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000091a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009435  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009c03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e4       	ldi	r30, 0x4E	; 78
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 39       	cpi	r26, 0x9E	; 158
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e9       	ldi	r26, 0x9E	; 158
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3a       	cpi	r26, 0xA4	; 164
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <main>
      8a:	0c 94 25 12 	jmp	0x244a	; 0x244a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bd 11 	jmp	0x237a	; 0x237a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e9       	ldi	r26, 0x95	; 149
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c9 11 	jmp	0x2392	; 0x2392 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e5 11 	jmp	0x23ca	; 0x23ca <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c9 11 	jmp	0x2392	; 0x2392 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e5 11 	jmp	0x23ca	; 0x23ca <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bd 11 	jmp	0x237a	; 0x237a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	85 e9       	ldi	r24, 0x95	; 149
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c9 11 	jmp	0x2392	; 0x2392 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e5 11 	jmp	0x23ca	; 0x23ca <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c9 11 	jmp	0x2392	; 0x2392 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e5 11 	jmp	0x23ca	; 0x23ca <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c9 11 	jmp	0x2392	; 0x2392 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e5 11 	jmp	0x23ca	; 0x23ca <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 cd 11 	jmp	0x239a	; 0x239a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e9 11 	jmp	0x23d2	; 0x23d2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <LCD_Claculator_init>:
/*
 * Description :
 * Initialization of LCD_Calculator
 */
void LCD_Claculator_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Initialize the LCD
	 */
	LCD_init();
     b4e:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_init>

	/*
	 * print (Simple) on 1st row, begin from column 5
	 */
	LCD_displayStringRowColumn(0,5,"Simple");
     b52:	20 e6       	ldi	r18, 0x60	; 96
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	65 e0       	ldi	r22, 0x05	; 5
     b5a:	a9 01       	movw	r20, r18
     b5c:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <LCD_displayStringRowColumn>

	/*
	 * print (Simple) on 3rd row, begin from column 3
	 */
	LCD_displayStringRowColumn(1,3,"Calculator");
     b60:	27 e6       	ldi	r18, 0x67	; 103
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	63 e0       	ldi	r22, 0x03	; 3
     b68:	a9 01       	movw	r20, r18
     b6a:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <LCD_displayStringRowColumn>

	/*
	 * begin displaying numbers in 2nd row, begin column 0
	 */
	LCD_moveCursor(2, 0);
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_moveCursor>
}
     b76:	cf 91       	pop	r28
     b78:	df 91       	pop	r29
     b7a:	08 95       	ret

00000b7c <Result_Display>:
/*
 * Description :
 * Display the result on LCD
 */
void Result_Display(sint32 res)
{
     b7c:	df 93       	push	r29
     b7e:	cf 93       	push	r28
     b80:	00 d0       	rcall	.+0      	; 0xb82 <Result_Display+0x6>
     b82:	00 d0       	rcall	.+0      	; 0xb84 <Result_Display+0x8>
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	69 83       	std	Y+1, r22	; 0x01
     b8a:	7a 83       	std	Y+2, r23	; 0x02
     b8c:	8b 83       	std	Y+3, r24	; 0x03
     b8e:	9c 83       	std	Y+4, r25	; 0x04
	/*
	 * checking if the operation is not a division
	 */
	if(div_flag == 0)
     b90:	80 91 9e 00 	lds	r24, 0x009E
     b94:	88 23       	and	r24, r24
     b96:	99 f4       	brne	.+38     	; 0xbbe <Result_Display+0x42>
	{
		/*
		 * check if result is not a negative, so will print it without '-'
		 */
		if(res >= 0)
     b98:	89 81       	ldd	r24, Y+1	; 0x01
     b9a:	9a 81       	ldd	r25, Y+2	; 0x02
     b9c:	ab 81       	ldd	r26, Y+3	; 0x03
     b9e:	bc 81       	ldd	r27, Y+4	; 0x04
     ba0:	bb 23       	and	r27, r27
     ba2:	2c f0       	brlt	.+10     	; 0xbae <Result_Display+0x32>
		{
			LCD_intgerToString(res);
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
     ba6:	9a 81       	ldd	r25, Y+2	; 0x02
     ba8:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <LCD_intgerToString>
     bac:	27 c0       	rjmp	.+78     	; 0xbfc <Result_Display+0x80>
		/*
		 * check if result is a negative, so will print it with '-'
		 */
		else
		{
			LCD_displayCharacter('-');
     bae:	8d e2       	ldi	r24, 0x2D	; 45
     bb0:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <LCD_displayCharacter>
			LCD_intgerToString(res);
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
     bb6:	9a 81       	ldd	r25, Y+2	; 0x02
     bb8:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <LCD_intgerToString>
     bbc:	1f c0       	rjmp	.+62     	; 0xbfc <Result_Display+0x80>
	else
	{
		/*
		 * check if divisor is 0, will print error
		 */
		if(num2 == 0)
     bbe:	80 91 9f 00 	lds	r24, 0x009F
     bc2:	90 91 a0 00 	lds	r25, 0x00A0
     bc6:	00 97       	sbiw	r24, 0x00	; 0
     bc8:	29 f4       	brne	.+10     	; 0xbd4 <Result_Display+0x58>
		{
			LCD_displayString("ERROR, Divisor 0");
     bca:	82 e7       	ldi	r24, 0x72	; 114
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <LCD_displayString>
     bd2:	12 c0       	rjmp	.+36     	; 0xbf8 <Result_Display+0x7c>
		else
		{
			/*
			 * check if result is not a negative, so will print it without '-'
			 */
			if(res >= 0)
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	9a 81       	ldd	r25, Y+2	; 0x02
     bd8:	ab 81       	ldd	r26, Y+3	; 0x03
     bda:	bc 81       	ldd	r27, Y+4	; 0x04
     bdc:	bb 23       	and	r27, r27
     bde:	2c f0       	brlt	.+10     	; 0xbea <Result_Display+0x6e>
			{
				LCD_intgerToString(res);
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	9a 81       	ldd	r25, Y+2	; 0x02
     be4:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <LCD_intgerToString>
     be8:	07 c0       	rjmp	.+14     	; 0xbf8 <Result_Display+0x7c>
			/*
			 * check if result is a negative, so will print it with '-'
			 */
			else
			{
				LCD_displayCharacter('-');
     bea:	8d e2       	ldi	r24, 0x2D	; 45
     bec:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <LCD_displayCharacter>
				LCD_intgerToString(res);
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	9a 81       	ldd	r25, Y+2	; 0x02
     bf4:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <LCD_intgerToString>
			}
		}
		div_flag = 0;
     bf8:	10 92 9e 00 	sts	0x009E, r1
	}
}
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	0f 90       	pop	r0
     c02:	0f 90       	pop	r0
     c04:	cf 91       	pop	r28
     c06:	df 91       	pop	r29
     c08:	08 95       	ret

00000c0a <Claculation>:
/*
 * Description :
 * Calculate the number with operation
 */
sint32 Claculation(uint16 n1, uint16 n2, uint8 oper)
{
     c0a:	df 93       	push	r29
     c0c:	cf 93       	push	r28
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
     c12:	2b 97       	sbiw	r28, 0x0b	; 11
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	f8 94       	cli
     c18:	de bf       	out	0x3e, r29	; 62
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	cd bf       	out	0x3d, r28	; 61
     c1e:	9e 83       	std	Y+6, r25	; 0x06
     c20:	8d 83       	std	Y+5, r24	; 0x05
     c22:	78 87       	std	Y+8, r23	; 0x08
     c24:	6f 83       	std	Y+7, r22	; 0x07
     c26:	49 87       	std	Y+9, r20	; 0x09
	sint32 result;
	switch(oper)
     c28:	89 85       	ldd	r24, Y+9	; 0x09
     c2a:	28 2f       	mov	r18, r24
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	3b 87       	std	Y+11, r19	; 0x0b
     c30:	2a 87       	std	Y+10, r18	; 0x0a
     c32:	4a 85       	ldd	r20, Y+10	; 0x0a
     c34:	5b 85       	ldd	r21, Y+11	; 0x0b
     c36:	4b 32       	cpi	r20, 0x2B	; 43
     c38:	51 05       	cpc	r21, r1
     c3a:	09 f4       	brne	.+2      	; 0xc3e <Claculation+0x34>
     c3c:	3f c0       	rjmp	.+126    	; 0xcbc <Claculation+0xb2>
     c3e:	8a 85       	ldd	r24, Y+10	; 0x0a
     c40:	9b 85       	ldd	r25, Y+11	; 0x0b
     c42:	8c 32       	cpi	r24, 0x2C	; 44
     c44:	91 05       	cpc	r25, r1
     c46:	34 f4       	brge	.+12     	; 0xc54 <Claculation+0x4a>
     c48:	2a 85       	ldd	r18, Y+10	; 0x0a
     c4a:	3b 85       	ldd	r19, Y+11	; 0x0b
     c4c:	2a 32       	cpi	r18, 0x2A	; 42
     c4e:	31 05       	cpc	r19, r1
     c50:	61 f0       	breq	.+24     	; 0xc6a <Claculation+0x60>
     c52:	51 c0       	rjmp	.+162    	; 0xcf6 <Claculation+0xec>
     c54:	4a 85       	ldd	r20, Y+10	; 0x0a
     c56:	5b 85       	ldd	r21, Y+11	; 0x0b
     c58:	4d 32       	cpi	r20, 0x2D	; 45
     c5a:	51 05       	cpc	r21, r1
     c5c:	e9 f1       	breq	.+122    	; 0xcd8 <Claculation+0xce>
     c5e:	8a 85       	ldd	r24, Y+10	; 0x0a
     c60:	9b 85       	ldd	r25, Y+11	; 0x0b
     c62:	8f 32       	cpi	r24, 0x2F	; 47
     c64:	91 05       	cpc	r25, r1
     c66:	a9 f0       	breq	.+42     	; 0xc92 <Claculation+0x88>
     c68:	46 c0       	rjmp	.+140    	; 0xcf6 <Claculation+0xec>
	{
	case '*':
		result = n1 * n2;
     c6a:	2d 81       	ldd	r18, Y+5	; 0x05
     c6c:	3e 81       	ldd	r19, Y+6	; 0x06
     c6e:	8f 81       	ldd	r24, Y+7	; 0x07
     c70:	98 85       	ldd	r25, Y+8	; 0x08
     c72:	ac 01       	movw	r20, r24
     c74:	24 9f       	mul	r18, r20
     c76:	c0 01       	movw	r24, r0
     c78:	25 9f       	mul	r18, r21
     c7a:	90 0d       	add	r25, r0
     c7c:	34 9f       	mul	r19, r20
     c7e:	90 0d       	add	r25, r0
     c80:	11 24       	eor	r1, r1
     c82:	cc 01       	movw	r24, r24
     c84:	a0 e0       	ldi	r26, 0x00	; 0
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	89 83       	std	Y+1, r24	; 0x01
     c8a:	9a 83       	std	Y+2, r25	; 0x02
     c8c:	ab 83       	std	Y+3, r26	; 0x03
     c8e:	bc 83       	std	Y+4, r27	; 0x04
     c90:	32 c0       	rjmp	.+100    	; 0xcf6 <Claculation+0xec>
		break;
	case '/':
		result = n1 / n2;
     c92:	8d 81       	ldd	r24, Y+5	; 0x05
     c94:	9e 81       	ldd	r25, Y+6	; 0x06
     c96:	2f 81       	ldd	r18, Y+7	; 0x07
     c98:	38 85       	ldd	r19, Y+8	; 0x08
     c9a:	b9 01       	movw	r22, r18
     c9c:	0e 94 a9 11 	call	0x2352	; 0x2352 <__udivmodhi4>
     ca0:	cb 01       	movw	r24, r22
     ca2:	cc 01       	movw	r24, r24
     ca4:	a0 e0       	ldi	r26, 0x00	; 0
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	89 83       	std	Y+1, r24	; 0x01
     caa:	9a 83       	std	Y+2, r25	; 0x02
     cac:	ab 83       	std	Y+3, r26	; 0x03
     cae:	bc 83       	std	Y+4, r27	; 0x04
		/*
		 * division flag to check the division operation
		 */
		div_flag++;
     cb0:	80 91 9e 00 	lds	r24, 0x009E
     cb4:	8f 5f       	subi	r24, 0xFF	; 255
     cb6:	80 93 9e 00 	sts	0x009E, r24
     cba:	1d c0       	rjmp	.+58     	; 0xcf6 <Claculation+0xec>
		break;
	case '+':
		result = n1 + n2;
     cbc:	2d 81       	ldd	r18, Y+5	; 0x05
     cbe:	3e 81       	ldd	r19, Y+6	; 0x06
     cc0:	8f 81       	ldd	r24, Y+7	; 0x07
     cc2:	98 85       	ldd	r25, Y+8	; 0x08
     cc4:	82 0f       	add	r24, r18
     cc6:	93 1f       	adc	r25, r19
     cc8:	cc 01       	movw	r24, r24
     cca:	a0 e0       	ldi	r26, 0x00	; 0
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	89 83       	std	Y+1, r24	; 0x01
     cd0:	9a 83       	std	Y+2, r25	; 0x02
     cd2:	ab 83       	std	Y+3, r26	; 0x03
     cd4:	bc 83       	std	Y+4, r27	; 0x04
     cd6:	0f c0       	rjmp	.+30     	; 0xcf6 <Claculation+0xec>
		break;
	case '-':
		result = n1 - n2;
     cd8:	2d 81       	ldd	r18, Y+5	; 0x05
     cda:	3e 81       	ldd	r19, Y+6	; 0x06
     cdc:	8f 81       	ldd	r24, Y+7	; 0x07
     cde:	98 85       	ldd	r25, Y+8	; 0x08
     ce0:	a9 01       	movw	r20, r18
     ce2:	48 1b       	sub	r20, r24
     ce4:	59 0b       	sbc	r21, r25
     ce6:	ca 01       	movw	r24, r20
     ce8:	cc 01       	movw	r24, r24
     cea:	a0 e0       	ldi	r26, 0x00	; 0
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	89 83       	std	Y+1, r24	; 0x01
     cf0:	9a 83       	std	Y+2, r25	; 0x02
     cf2:	ab 83       	std	Y+3, r26	; 0x03
     cf4:	bc 83       	std	Y+4, r27	; 0x04
		break;
	}
	return result;
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	9a 81       	ldd	r25, Y+2	; 0x02
     cfa:	ab 81       	ldd	r26, Y+3	; 0x03
     cfc:	bc 81       	ldd	r27, Y+4	; 0x04
}
     cfe:	bc 01       	movw	r22, r24
     d00:	cd 01       	movw	r24, r26
     d02:	2b 96       	adiw	r28, 0x0b	; 11
     d04:	0f b6       	in	r0, 0x3f	; 63
     d06:	f8 94       	cli
     d08:	de bf       	out	0x3e, r29	; 62
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	cd bf       	out	0x3d, r28	; 61
     d0e:	cf 91       	pop	r28
     d10:	df 91       	pop	r29
     d12:	08 95       	ret

00000d14 <Taking_numbers>:
/*
 * Description :
 * Taking number from users & store them in variables
 */
void Taking_numbers(uint8 num)
{
     d14:	df 93       	push	r29
     d16:	cf 93       	push	r28
     d18:	0f 92       	push	r0
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
     d1e:	89 83       	std	Y+1, r24	; 0x01
	/* According to the flag, number will store in left or right of the operation */
	if(num2_flag == 0)
     d20:	80 91 a3 00 	lds	r24, 0x00A3
     d24:	88 23       	and	r24, r24
     d26:	c1 f4       	brne	.+48     	; 0xd58 <Taking_numbers+0x44>
	{
		num1 = (num1*10) + num;
     d28:	80 91 a1 00 	lds	r24, 0x00A1
     d2c:	90 91 a2 00 	lds	r25, 0x00A2
     d30:	9c 01       	movw	r18, r24
     d32:	22 0f       	add	r18, r18
     d34:	33 1f       	adc	r19, r19
     d36:	c9 01       	movw	r24, r18
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	28 0f       	add	r18, r24
     d42:	39 1f       	adc	r19, r25
     d44:	89 81       	ldd	r24, Y+1	; 0x01
     d46:	88 2f       	mov	r24, r24
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	82 0f       	add	r24, r18
     d4c:	93 1f       	adc	r25, r19
     d4e:	90 93 a2 00 	sts	0x00A2, r25
     d52:	80 93 a1 00 	sts	0x00A1, r24
     d56:	17 c0       	rjmp	.+46     	; 0xd86 <Taking_numbers+0x72>
	}
	else
	{
		num2 = (num2*10) + num;
     d58:	80 91 9f 00 	lds	r24, 0x009F
     d5c:	90 91 a0 00 	lds	r25, 0x00A0
     d60:	9c 01       	movw	r18, r24
     d62:	22 0f       	add	r18, r18
     d64:	33 1f       	adc	r19, r19
     d66:	c9 01       	movw	r24, r18
     d68:	88 0f       	add	r24, r24
     d6a:	99 1f       	adc	r25, r25
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	28 0f       	add	r18, r24
     d72:	39 1f       	adc	r19, r25
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	88 2f       	mov	r24, r24
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	82 0f       	add	r24, r18
     d7c:	93 1f       	adc	r25, r19
     d7e:	90 93 a0 00 	sts	0x00A0, r25
     d82:	80 93 9f 00 	sts	0x009F, r24
	}
}
     d86:	0f 90       	pop	r0
     d88:	cf 91       	pop	r28
     d8a:	df 91       	pop	r29
     d8c:	08 95       	ret

00000d8e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     d8e:	df 93       	push	r29
     d90:	cf 93       	push	r28
     d92:	00 d0       	rcall	.+0      	; 0xd94 <GPIO_setupPinDirection+0x6>
     d94:	00 d0       	rcall	.+0      	; 0xd96 <GPIO_setupPinDirection+0x8>
     d96:	0f 92       	push	r0
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
     d9c:	89 83       	std	Y+1, r24	; 0x01
     d9e:	6a 83       	std	Y+2, r22	; 0x02
     da0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	88 30       	cpi	r24, 0x08	; 8
     da6:	08 f0       	brcs	.+2      	; 0xdaa <GPIO_setupPinDirection+0x1c>
     da8:	d5 c0       	rjmp	.+426    	; 0xf54 <GPIO_setupPinDirection+0x1c6>
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	84 30       	cpi	r24, 0x04	; 4
     dae:	08 f0       	brcs	.+2      	; 0xdb2 <GPIO_setupPinDirection+0x24>
     db0:	d1 c0       	rjmp	.+418    	; 0xf54 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	3d 83       	std	Y+5, r19	; 0x05
     dba:	2c 83       	std	Y+4, r18	; 0x04
     dbc:	8c 81       	ldd	r24, Y+4	; 0x04
     dbe:	9d 81       	ldd	r25, Y+5	; 0x05
     dc0:	81 30       	cpi	r24, 0x01	; 1
     dc2:	91 05       	cpc	r25, r1
     dc4:	09 f4       	brne	.+2      	; 0xdc8 <GPIO_setupPinDirection+0x3a>
     dc6:	43 c0       	rjmp	.+134    	; 0xe4e <GPIO_setupPinDirection+0xc0>
     dc8:	2c 81       	ldd	r18, Y+4	; 0x04
     dca:	3d 81       	ldd	r19, Y+5	; 0x05
     dcc:	22 30       	cpi	r18, 0x02	; 2
     dce:	31 05       	cpc	r19, r1
     dd0:	2c f4       	brge	.+10     	; 0xddc <GPIO_setupPinDirection+0x4e>
     dd2:	8c 81       	ldd	r24, Y+4	; 0x04
     dd4:	9d 81       	ldd	r25, Y+5	; 0x05
     dd6:	00 97       	sbiw	r24, 0x00	; 0
     dd8:	71 f0       	breq	.+28     	; 0xdf6 <GPIO_setupPinDirection+0x68>
     dda:	bc c0       	rjmp	.+376    	; 0xf54 <GPIO_setupPinDirection+0x1c6>
     ddc:	2c 81       	ldd	r18, Y+4	; 0x04
     dde:	3d 81       	ldd	r19, Y+5	; 0x05
     de0:	22 30       	cpi	r18, 0x02	; 2
     de2:	31 05       	cpc	r19, r1
     de4:	09 f4       	brne	.+2      	; 0xde8 <GPIO_setupPinDirection+0x5a>
     de6:	5f c0       	rjmp	.+190    	; 0xea6 <GPIO_setupPinDirection+0x118>
     de8:	8c 81       	ldd	r24, Y+4	; 0x04
     dea:	9d 81       	ldd	r25, Y+5	; 0x05
     dec:	83 30       	cpi	r24, 0x03	; 3
     dee:	91 05       	cpc	r25, r1
     df0:	09 f4       	brne	.+2      	; 0xdf4 <GPIO_setupPinDirection+0x66>
     df2:	85 c0       	rjmp	.+266    	; 0xefe <GPIO_setupPinDirection+0x170>
     df4:	af c0       	rjmp	.+350    	; 0xf54 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     df6:	8b 81       	ldd	r24, Y+3	; 0x03
     df8:	81 30       	cpi	r24, 0x01	; 1
     dfa:	a1 f4       	brne	.+40     	; 0xe24 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     dfc:	aa e3       	ldi	r26, 0x3A	; 58
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	ea e3       	ldi	r30, 0x3A	; 58
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	48 2f       	mov	r20, r24
     e08:	8a 81       	ldd	r24, Y+2	; 0x02
     e0a:	28 2f       	mov	r18, r24
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	02 2e       	mov	r0, r18
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <GPIO_setupPinDirection+0x8c>
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	0a 94       	dec	r0
     e1c:	e2 f7       	brpl	.-8      	; 0xe16 <GPIO_setupPinDirection+0x88>
     e1e:	84 2b       	or	r24, r20
     e20:	8c 93       	st	X, r24
     e22:	98 c0       	rjmp	.+304    	; 0xf54 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     e24:	aa e3       	ldi	r26, 0x3A	; 58
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	ea e3       	ldi	r30, 0x3A	; 58
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	48 2f       	mov	r20, r24
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	02 2e       	mov	r0, r18
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <GPIO_setupPinDirection+0xb4>
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	0a 94       	dec	r0
     e44:	e2 f7       	brpl	.-8      	; 0xe3e <GPIO_setupPinDirection+0xb0>
     e46:	80 95       	com	r24
     e48:	84 23       	and	r24, r20
     e4a:	8c 93       	st	X, r24
     e4c:	83 c0       	rjmp	.+262    	; 0xf54 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     e4e:	8b 81       	ldd	r24, Y+3	; 0x03
     e50:	81 30       	cpi	r24, 0x01	; 1
     e52:	a1 f4       	brne	.+40     	; 0xe7c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     e54:	a7 e3       	ldi	r26, 0x37	; 55
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e7 e3       	ldi	r30, 0x37	; 55
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	48 2f       	mov	r20, r24
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	02 2e       	mov	r0, r18
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <GPIO_setupPinDirection+0xe4>
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	0a 94       	dec	r0
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <GPIO_setupPinDirection+0xe0>
     e76:	84 2b       	or	r24, r20
     e78:	8c 93       	st	X, r24
     e7a:	6c c0       	rjmp	.+216    	; 0xf54 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     e7c:	a7 e3       	ldi	r26, 0x37	; 55
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e7 e3       	ldi	r30, 0x37	; 55
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	48 2f       	mov	r20, r24
     e88:	8a 81       	ldd	r24, Y+2	; 0x02
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	02 2e       	mov	r0, r18
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <GPIO_setupPinDirection+0x10c>
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	0a 94       	dec	r0
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <GPIO_setupPinDirection+0x108>
     e9e:	80 95       	com	r24
     ea0:	84 23       	and	r24, r20
     ea2:	8c 93       	st	X, r24
     ea4:	57 c0       	rjmp	.+174    	; 0xf54 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	a1 f4       	brne	.+40     	; 0xed4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     eac:	a4 e3       	ldi	r26, 0x34	; 52
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	e4 e3       	ldi	r30, 0x34	; 52
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	48 2f       	mov	r20, r24
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	02 2e       	mov	r0, r18
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <GPIO_setupPinDirection+0x13c>
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	0a 94       	dec	r0
     ecc:	e2 f7       	brpl	.-8      	; 0xec6 <GPIO_setupPinDirection+0x138>
     ece:	84 2b       	or	r24, r20
     ed0:	8c 93       	st	X, r24
     ed2:	40 c0       	rjmp	.+128    	; 0xf54 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     ed4:	a4 e3       	ldi	r26, 0x34	; 52
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e4 e3       	ldi	r30, 0x34	; 52
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	48 2f       	mov	r20, r24
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	02 2e       	mov	r0, r18
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <GPIO_setupPinDirection+0x164>
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	0a 94       	dec	r0
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <GPIO_setupPinDirection+0x160>
     ef6:	80 95       	com	r24
     ef8:	84 23       	and	r24, r20
     efa:	8c 93       	st	X, r24
     efc:	2b c0       	rjmp	.+86     	; 0xf54 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     efe:	8b 81       	ldd	r24, Y+3	; 0x03
     f00:	81 30       	cpi	r24, 0x01	; 1
     f02:	a1 f4       	brne	.+40     	; 0xf2c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     f04:	a1 e3       	ldi	r26, 0x31	; 49
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e1 e3       	ldi	r30, 0x31	; 49
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	48 2f       	mov	r20, r24
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	02 2e       	mov	r0, r18
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <GPIO_setupPinDirection+0x194>
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	0a 94       	dec	r0
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <GPIO_setupPinDirection+0x190>
     f26:	84 2b       	or	r24, r20
     f28:	8c 93       	st	X, r24
     f2a:	14 c0       	rjmp	.+40     	; 0xf54 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     f2c:	a1 e3       	ldi	r26, 0x31	; 49
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e1 e3       	ldi	r30, 0x31	; 49
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	48 2f       	mov	r20, r24
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	02 2e       	mov	r0, r18
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <GPIO_setupPinDirection+0x1bc>
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	0a 94       	dec	r0
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <GPIO_setupPinDirection+0x1b8>
     f4e:	80 95       	com	r24
     f50:	84 23       	and	r24, r20
     f52:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	08 95       	ret

00000f64 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	00 d0       	rcall	.+0      	; 0xf6a <GPIO_writePin+0x6>
     f6a:	00 d0       	rcall	.+0      	; 0xf6c <GPIO_writePin+0x8>
     f6c:	0f 92       	push	r0
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	89 83       	std	Y+1, r24	; 0x01
     f74:	6a 83       	std	Y+2, r22	; 0x02
     f76:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	88 30       	cpi	r24, 0x08	; 8
     f7c:	08 f0       	brcs	.+2      	; 0xf80 <GPIO_writePin+0x1c>
     f7e:	d5 c0       	rjmp	.+426    	; 0x112a <GPIO_writePin+0x1c6>
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	84 30       	cpi	r24, 0x04	; 4
     f84:	08 f0       	brcs	.+2      	; 0xf88 <GPIO_writePin+0x24>
     f86:	d1 c0       	rjmp	.+418    	; 0x112a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	3d 83       	std	Y+5, r19	; 0x05
     f90:	2c 83       	std	Y+4, r18	; 0x04
     f92:	8c 81       	ldd	r24, Y+4	; 0x04
     f94:	9d 81       	ldd	r25, Y+5	; 0x05
     f96:	81 30       	cpi	r24, 0x01	; 1
     f98:	91 05       	cpc	r25, r1
     f9a:	09 f4       	brne	.+2      	; 0xf9e <GPIO_writePin+0x3a>
     f9c:	43 c0       	rjmp	.+134    	; 0x1024 <GPIO_writePin+0xc0>
     f9e:	2c 81       	ldd	r18, Y+4	; 0x04
     fa0:	3d 81       	ldd	r19, Y+5	; 0x05
     fa2:	22 30       	cpi	r18, 0x02	; 2
     fa4:	31 05       	cpc	r19, r1
     fa6:	2c f4       	brge	.+10     	; 0xfb2 <GPIO_writePin+0x4e>
     fa8:	8c 81       	ldd	r24, Y+4	; 0x04
     faa:	9d 81       	ldd	r25, Y+5	; 0x05
     fac:	00 97       	sbiw	r24, 0x00	; 0
     fae:	71 f0       	breq	.+28     	; 0xfcc <GPIO_writePin+0x68>
     fb0:	bc c0       	rjmp	.+376    	; 0x112a <GPIO_writePin+0x1c6>
     fb2:	2c 81       	ldd	r18, Y+4	; 0x04
     fb4:	3d 81       	ldd	r19, Y+5	; 0x05
     fb6:	22 30       	cpi	r18, 0x02	; 2
     fb8:	31 05       	cpc	r19, r1
     fba:	09 f4       	brne	.+2      	; 0xfbe <GPIO_writePin+0x5a>
     fbc:	5f c0       	rjmp	.+190    	; 0x107c <GPIO_writePin+0x118>
     fbe:	8c 81       	ldd	r24, Y+4	; 0x04
     fc0:	9d 81       	ldd	r25, Y+5	; 0x05
     fc2:	83 30       	cpi	r24, 0x03	; 3
     fc4:	91 05       	cpc	r25, r1
     fc6:	09 f4       	brne	.+2      	; 0xfca <GPIO_writePin+0x66>
     fc8:	85 c0       	rjmp	.+266    	; 0x10d4 <GPIO_writePin+0x170>
     fca:	af c0       	rjmp	.+350    	; 0x112a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	81 30       	cpi	r24, 0x01	; 1
     fd0:	a1 f4       	brne	.+40     	; 0xffa <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     fd2:	ab e3       	ldi	r26, 0x3B	; 59
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	eb e3       	ldi	r30, 0x3B	; 59
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	48 2f       	mov	r20, r24
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	02 2e       	mov	r0, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <GPIO_writePin+0x8c>
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	0a 94       	dec	r0
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <GPIO_writePin+0x88>
     ff4:	84 2b       	or	r24, r20
     ff6:	8c 93       	st	X, r24
     ff8:	98 c0       	rjmp	.+304    	; 0x112a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     ffa:	ab e3       	ldi	r26, 0x3B	; 59
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	eb e3       	ldi	r30, 0x3B	; 59
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	48 2f       	mov	r20, r24
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	02 2e       	mov	r0, r18
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <GPIO_writePin+0xb4>
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	0a 94       	dec	r0
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <GPIO_writePin+0xb0>
    101c:	80 95       	com	r24
    101e:	84 23       	and	r24, r20
    1020:	8c 93       	st	X, r24
    1022:	83 c0       	rjmp	.+262    	; 0x112a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	81 30       	cpi	r24, 0x01	; 1
    1028:	a1 f4       	brne	.+40     	; 0x1052 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    102a:	a8 e3       	ldi	r26, 0x38	; 56
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e8 e3       	ldi	r30, 0x38	; 56
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	48 2f       	mov	r20, r24
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	02 2e       	mov	r0, r18
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <GPIO_writePin+0xe4>
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	0a 94       	dec	r0
    104a:	e2 f7       	brpl	.-8      	; 0x1044 <GPIO_writePin+0xe0>
    104c:	84 2b       	or	r24, r20
    104e:	8c 93       	st	X, r24
    1050:	6c c0       	rjmp	.+216    	; 0x112a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1052:	a8 e3       	ldi	r26, 0x38	; 56
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e8 e3       	ldi	r30, 0x38	; 56
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	48 2f       	mov	r20, r24
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	02 2e       	mov	r0, r18
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <GPIO_writePin+0x10c>
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	0a 94       	dec	r0
    1072:	e2 f7       	brpl	.-8      	; 0x106c <GPIO_writePin+0x108>
    1074:	80 95       	com	r24
    1076:	84 23       	and	r24, r20
    1078:	8c 93       	st	X, r24
    107a:	57 c0       	rjmp	.+174    	; 0x112a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	81 30       	cpi	r24, 0x01	; 1
    1080:	a1 f4       	brne	.+40     	; 0x10aa <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1082:	a5 e3       	ldi	r26, 0x35	; 53
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e5 e3       	ldi	r30, 0x35	; 53
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	48 2f       	mov	r20, r24
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 2e       	mov	r0, r18
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <GPIO_writePin+0x13c>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	0a 94       	dec	r0
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <GPIO_writePin+0x138>
    10a4:	84 2b       	or	r24, r20
    10a6:	8c 93       	st	X, r24
    10a8:	40 c0       	rjmp	.+128    	; 0x112a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    10aa:	a5 e3       	ldi	r26, 0x35	; 53
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e5 e3       	ldi	r30, 0x35	; 53
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	48 2f       	mov	r20, r24
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	02 2e       	mov	r0, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <GPIO_writePin+0x164>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	0a 94       	dec	r0
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <GPIO_writePin+0x160>
    10cc:	80 95       	com	r24
    10ce:	84 23       	and	r24, r20
    10d0:	8c 93       	st	X, r24
    10d2:	2b c0       	rjmp	.+86     	; 0x112a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	81 30       	cpi	r24, 0x01	; 1
    10d8:	a1 f4       	brne	.+40     	; 0x1102 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    10da:	a2 e3       	ldi	r26, 0x32	; 50
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e2 e3       	ldi	r30, 0x32	; 50
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	48 2f       	mov	r20, r24
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	02 2e       	mov	r0, r18
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <GPIO_writePin+0x194>
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	0a 94       	dec	r0
    10fa:	e2 f7       	brpl	.-8      	; 0x10f4 <GPIO_writePin+0x190>
    10fc:	84 2b       	or	r24, r20
    10fe:	8c 93       	st	X, r24
    1100:	14 c0       	rjmp	.+40     	; 0x112a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1102:	a2 e3       	ldi	r26, 0x32	; 50
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e2 e3       	ldi	r30, 0x32	; 50
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	48 2f       	mov	r20, r24
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	02 2e       	mov	r0, r18
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <GPIO_writePin+0x1bc>
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	0a 94       	dec	r0
    1122:	e2 f7       	brpl	.-8      	; 0x111c <GPIO_writePin+0x1b8>
    1124:	80 95       	com	r24
    1126:	84 23       	and	r24, r20
    1128:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	cf 91       	pop	r28
    1136:	df 91       	pop	r29
    1138:	08 95       	ret

0000113a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    113a:	df 93       	push	r29
    113c:	cf 93       	push	r28
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPin+0x6>
    1140:	00 d0       	rcall	.+0      	; 0x1142 <GPIO_readPin+0x8>
    1142:	0f 92       	push	r0
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    1148:	8a 83       	std	Y+2, r24	; 0x02
    114a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    114c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	88 30       	cpi	r24, 0x08	; 8
    1152:	08 f0       	brcs	.+2      	; 0x1156 <GPIO_readPin+0x1c>
    1154:	84 c0       	rjmp	.+264    	; 0x125e <GPIO_readPin+0x124>
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	84 30       	cpi	r24, 0x04	; 4
    115a:	08 f0       	brcs	.+2      	; 0x115e <GPIO_readPin+0x24>
    115c:	80 c0       	rjmp	.+256    	; 0x125e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	3d 83       	std	Y+5, r19	; 0x05
    1166:	2c 83       	std	Y+4, r18	; 0x04
    1168:	4c 81       	ldd	r20, Y+4	; 0x04
    116a:	5d 81       	ldd	r21, Y+5	; 0x05
    116c:	41 30       	cpi	r20, 0x01	; 1
    116e:	51 05       	cpc	r21, r1
    1170:	79 f1       	breq	.+94     	; 0x11d0 <GPIO_readPin+0x96>
    1172:	8c 81       	ldd	r24, Y+4	; 0x04
    1174:	9d 81       	ldd	r25, Y+5	; 0x05
    1176:	82 30       	cpi	r24, 0x02	; 2
    1178:	91 05       	cpc	r25, r1
    117a:	34 f4       	brge	.+12     	; 0x1188 <GPIO_readPin+0x4e>
    117c:	2c 81       	ldd	r18, Y+4	; 0x04
    117e:	3d 81       	ldd	r19, Y+5	; 0x05
    1180:	21 15       	cp	r18, r1
    1182:	31 05       	cpc	r19, r1
    1184:	69 f0       	breq	.+26     	; 0x11a0 <GPIO_readPin+0x66>
    1186:	6b c0       	rjmp	.+214    	; 0x125e <GPIO_readPin+0x124>
    1188:	4c 81       	ldd	r20, Y+4	; 0x04
    118a:	5d 81       	ldd	r21, Y+5	; 0x05
    118c:	42 30       	cpi	r20, 0x02	; 2
    118e:	51 05       	cpc	r21, r1
    1190:	b9 f1       	breq	.+110    	; 0x1200 <GPIO_readPin+0xc6>
    1192:	8c 81       	ldd	r24, Y+4	; 0x04
    1194:	9d 81       	ldd	r25, Y+5	; 0x05
    1196:	83 30       	cpi	r24, 0x03	; 3
    1198:	91 05       	cpc	r25, r1
    119a:	09 f4       	brne	.+2      	; 0x119e <GPIO_readPin+0x64>
    119c:	49 c0       	rjmp	.+146    	; 0x1230 <GPIO_readPin+0xf6>
    119e:	5f c0       	rjmp	.+190    	; 0x125e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    11a0:	e9 e3       	ldi	r30, 0x39	; 57
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	88 2f       	mov	r24, r24
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	a9 01       	movw	r20, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <GPIO_readPin+0x7e>
    11b4:	55 95       	asr	r21
    11b6:	47 95       	ror	r20
    11b8:	8a 95       	dec	r24
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <GPIO_readPin+0x7a>
    11bc:	ca 01       	movw	r24, r20
    11be:	81 70       	andi	r24, 0x01	; 1
    11c0:	90 70       	andi	r25, 0x00	; 0
    11c2:	88 23       	and	r24, r24
    11c4:	19 f0       	breq	.+6      	; 0x11cc <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	89 83       	std	Y+1, r24	; 0x01
    11ca:	49 c0       	rjmp	.+146    	; 0x125e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11cc:	19 82       	std	Y+1, r1	; 0x01
    11ce:	47 c0       	rjmp	.+142    	; 0x125e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    11d0:	e6 e3       	ldi	r30, 0x36	; 54
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	88 2f       	mov	r24, r24
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	a9 01       	movw	r20, r18
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <GPIO_readPin+0xae>
    11e4:	55 95       	asr	r21
    11e6:	47 95       	ror	r20
    11e8:	8a 95       	dec	r24
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <GPIO_readPin+0xaa>
    11ec:	ca 01       	movw	r24, r20
    11ee:	81 70       	andi	r24, 0x01	; 1
    11f0:	90 70       	andi	r25, 0x00	; 0
    11f2:	88 23       	and	r24, r24
    11f4:	19 f0       	breq	.+6      	; 0x11fc <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	89 83       	std	Y+1, r24	; 0x01
    11fa:	31 c0       	rjmp	.+98     	; 0x125e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11fc:	19 82       	std	Y+1, r1	; 0x01
    11fe:	2f c0       	rjmp	.+94     	; 0x125e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1200:	e3 e3       	ldi	r30, 0x33	; 51
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	88 2f       	mov	r24, r24
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	a9 01       	movw	r20, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <GPIO_readPin+0xde>
    1214:	55 95       	asr	r21
    1216:	47 95       	ror	r20
    1218:	8a 95       	dec	r24
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <GPIO_readPin+0xda>
    121c:	ca 01       	movw	r24, r20
    121e:	81 70       	andi	r24, 0x01	; 1
    1220:	90 70       	andi	r25, 0x00	; 0
    1222:	88 23       	and	r24, r24
    1224:	19 f0       	breq	.+6      	; 0x122c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	89 83       	std	Y+1, r24	; 0x01
    122a:	19 c0       	rjmp	.+50     	; 0x125e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    122c:	19 82       	std	Y+1, r1	; 0x01
    122e:	17 c0       	rjmp	.+46     	; 0x125e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1230:	e0 e3       	ldi	r30, 0x30	; 48
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	88 2f       	mov	r24, r24
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	a9 01       	movw	r20, r18
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <GPIO_readPin+0x10e>
    1244:	55 95       	asr	r21
    1246:	47 95       	ror	r20
    1248:	8a 95       	dec	r24
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <GPIO_readPin+0x10a>
    124c:	ca 01       	movw	r24, r20
    124e:	81 70       	andi	r24, 0x01	; 1
    1250:	90 70       	andi	r25, 0x00	; 0
    1252:	88 23       	and	r24, r24
    1254:	19 f0       	breq	.+6      	; 0x125c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	89 83       	std	Y+1, r24	; 0x01
    125a:	01 c0       	rjmp	.+2      	; 0x125e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    125c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    125e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	08 95       	ret

00001270 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1270:	df 93       	push	r29
    1272:	cf 93       	push	r28
    1274:	00 d0       	rcall	.+0      	; 0x1276 <GPIO_setupPortDirection+0x6>
    1276:	00 d0       	rcall	.+0      	; 0x1278 <GPIO_setupPortDirection+0x8>
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
    127c:	89 83       	std	Y+1, r24	; 0x01
    127e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	84 30       	cpi	r24, 0x04	; 4
    1284:	90 f5       	brcc	.+100    	; 0x12ea <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	3c 83       	std	Y+4, r19	; 0x04
    128e:	2b 83       	std	Y+3, r18	; 0x03
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	9c 81       	ldd	r25, Y+4	; 0x04
    1294:	81 30       	cpi	r24, 0x01	; 1
    1296:	91 05       	cpc	r25, r1
    1298:	d1 f0       	breq	.+52     	; 0x12ce <GPIO_setupPortDirection+0x5e>
    129a:	2b 81       	ldd	r18, Y+3	; 0x03
    129c:	3c 81       	ldd	r19, Y+4	; 0x04
    129e:	22 30       	cpi	r18, 0x02	; 2
    12a0:	31 05       	cpc	r19, r1
    12a2:	2c f4       	brge	.+10     	; 0x12ae <GPIO_setupPortDirection+0x3e>
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	9c 81       	ldd	r25, Y+4	; 0x04
    12a8:	00 97       	sbiw	r24, 0x00	; 0
    12aa:	61 f0       	breq	.+24     	; 0x12c4 <GPIO_setupPortDirection+0x54>
    12ac:	1e c0       	rjmp	.+60     	; 0x12ea <GPIO_setupPortDirection+0x7a>
    12ae:	2b 81       	ldd	r18, Y+3	; 0x03
    12b0:	3c 81       	ldd	r19, Y+4	; 0x04
    12b2:	22 30       	cpi	r18, 0x02	; 2
    12b4:	31 05       	cpc	r19, r1
    12b6:	81 f0       	breq	.+32     	; 0x12d8 <GPIO_setupPortDirection+0x68>
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	9c 81       	ldd	r25, Y+4	; 0x04
    12bc:	83 30       	cpi	r24, 0x03	; 3
    12be:	91 05       	cpc	r25, r1
    12c0:	81 f0       	breq	.+32     	; 0x12e2 <GPIO_setupPortDirection+0x72>
    12c2:	13 c0       	rjmp	.+38     	; 0x12ea <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    12c4:	ea e3       	ldi	r30, 0x3A	; 58
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	80 83       	st	Z, r24
    12cc:	0e c0       	rjmp	.+28     	; 0x12ea <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    12ce:	e7 e3       	ldi	r30, 0x37	; 55
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	80 83       	st	Z, r24
    12d6:	09 c0       	rjmp	.+18     	; 0x12ea <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    12d8:	e4 e3       	ldi	r30, 0x34	; 52
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	80 83       	st	Z, r24
    12e0:	04 c0       	rjmp	.+8      	; 0x12ea <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    12e2:	e1 e3       	ldi	r30, 0x31	; 49
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	80 83       	st	Z, r24
			break;
		}
	}
}
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	08 95       	ret

000012f8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	00 d0       	rcall	.+0      	; 0x12fe <GPIO_writePort+0x6>
    12fe:	00 d0       	rcall	.+0      	; 0x1300 <GPIO_writePort+0x8>
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
    1304:	89 83       	std	Y+1, r24	; 0x01
    1306:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	84 30       	cpi	r24, 0x04	; 4
    130c:	90 f5       	brcc	.+100    	; 0x1372 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	3c 83       	std	Y+4, r19	; 0x04
    1316:	2b 83       	std	Y+3, r18	; 0x03
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	9c 81       	ldd	r25, Y+4	; 0x04
    131c:	81 30       	cpi	r24, 0x01	; 1
    131e:	91 05       	cpc	r25, r1
    1320:	d1 f0       	breq	.+52     	; 0x1356 <GPIO_writePort+0x5e>
    1322:	2b 81       	ldd	r18, Y+3	; 0x03
    1324:	3c 81       	ldd	r19, Y+4	; 0x04
    1326:	22 30       	cpi	r18, 0x02	; 2
    1328:	31 05       	cpc	r19, r1
    132a:	2c f4       	brge	.+10     	; 0x1336 <GPIO_writePort+0x3e>
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	9c 81       	ldd	r25, Y+4	; 0x04
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	61 f0       	breq	.+24     	; 0x134c <GPIO_writePort+0x54>
    1334:	1e c0       	rjmp	.+60     	; 0x1372 <GPIO_writePort+0x7a>
    1336:	2b 81       	ldd	r18, Y+3	; 0x03
    1338:	3c 81       	ldd	r19, Y+4	; 0x04
    133a:	22 30       	cpi	r18, 0x02	; 2
    133c:	31 05       	cpc	r19, r1
    133e:	81 f0       	breq	.+32     	; 0x1360 <GPIO_writePort+0x68>
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	9c 81       	ldd	r25, Y+4	; 0x04
    1344:	83 30       	cpi	r24, 0x03	; 3
    1346:	91 05       	cpc	r25, r1
    1348:	81 f0       	breq	.+32     	; 0x136a <GPIO_writePort+0x72>
    134a:	13 c0       	rjmp	.+38     	; 0x1372 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    134c:	eb e3       	ldi	r30, 0x3B	; 59
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	80 83       	st	Z, r24
    1354:	0e c0       	rjmp	.+28     	; 0x1372 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1356:	e8 e3       	ldi	r30, 0x38	; 56
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	80 83       	st	Z, r24
    135e:	09 c0       	rjmp	.+18     	; 0x1372 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1360:	e5 e3       	ldi	r30, 0x35	; 53
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	80 83       	st	Z, r24
    1368:	04 c0       	rjmp	.+8      	; 0x1372 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    136a:	e2 e3       	ldi	r30, 0x32	; 50
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	80 83       	st	Z, r24
			break;
		}
	}
}
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	08 95       	ret

00001380 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	00 d0       	rcall	.+0      	; 0x1386 <GPIO_readPort+0x6>
    1386:	00 d0       	rcall	.+0      	; 0x1388 <GPIO_readPort+0x8>
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
    138c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    138e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	84 30       	cpi	r24, 0x04	; 4
    1394:	90 f5       	brcc	.+100    	; 0x13fa <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	3c 83       	std	Y+4, r19	; 0x04
    139e:	2b 83       	std	Y+3, r18	; 0x03
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	9c 81       	ldd	r25, Y+4	; 0x04
    13a4:	81 30       	cpi	r24, 0x01	; 1
    13a6:	91 05       	cpc	r25, r1
    13a8:	d1 f0       	breq	.+52     	; 0x13de <GPIO_readPort+0x5e>
    13aa:	2b 81       	ldd	r18, Y+3	; 0x03
    13ac:	3c 81       	ldd	r19, Y+4	; 0x04
    13ae:	22 30       	cpi	r18, 0x02	; 2
    13b0:	31 05       	cpc	r19, r1
    13b2:	2c f4       	brge	.+10     	; 0x13be <GPIO_readPort+0x3e>
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	9c 81       	ldd	r25, Y+4	; 0x04
    13b8:	00 97       	sbiw	r24, 0x00	; 0
    13ba:	61 f0       	breq	.+24     	; 0x13d4 <GPIO_readPort+0x54>
    13bc:	1e c0       	rjmp	.+60     	; 0x13fa <GPIO_readPort+0x7a>
    13be:	2b 81       	ldd	r18, Y+3	; 0x03
    13c0:	3c 81       	ldd	r19, Y+4	; 0x04
    13c2:	22 30       	cpi	r18, 0x02	; 2
    13c4:	31 05       	cpc	r19, r1
    13c6:	81 f0       	breq	.+32     	; 0x13e8 <GPIO_readPort+0x68>
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	9c 81       	ldd	r25, Y+4	; 0x04
    13cc:	83 30       	cpi	r24, 0x03	; 3
    13ce:	91 05       	cpc	r25, r1
    13d0:	81 f0       	breq	.+32     	; 0x13f2 <GPIO_readPort+0x72>
    13d2:	13 c0       	rjmp	.+38     	; 0x13fa <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    13d4:	e9 e3       	ldi	r30, 0x39	; 57
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	89 83       	std	Y+1, r24	; 0x01
    13dc:	0e c0       	rjmp	.+28     	; 0x13fa <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    13de:	e6 e3       	ldi	r30, 0x36	; 54
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	89 83       	std	Y+1, r24	; 0x01
    13e6:	09 c0       	rjmp	.+18     	; 0x13fa <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    13e8:	e3 e3       	ldi	r30, 0x33	; 51
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	89 83       	std	Y+1, r24	; 0x01
    13f0:	04 c0       	rjmp	.+8      	; 0x13fa <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    13f2:	e0 e3       	ldi	r30, 0x30	; 48
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	cf 91       	pop	r28
    1406:	df 91       	pop	r29
    1408:	08 95       	ret

0000140a <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    140a:	df 93       	push	r29
    140c:	cf 93       	push	r28
    140e:	00 d0       	rcall	.+0      	; 0x1410 <KEYPAD_getPressedKey+0x6>
    1410:	0f 92       	push	r0
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1416:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1418:	1b 82       	std	Y+3, r1	; 0x03
    141a:	43 c0       	rjmp	.+134    	; 0x14a2 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    141c:	82 e0       	ldi	r24, 0x02	; 2
    141e:	60 e0       	ldi	r22, 0x00	; 0
    1420:	0e 94 38 09 	call	0x1270	; 0x1270 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	98 2f       	mov	r25, r24
    1428:	9c 5f       	subi	r25, 0xFC	; 252
    142a:	82 e0       	ldi	r24, 0x02	; 2
    142c:	69 2f       	mov	r22, r25
    142e:	41 e0       	ldi	r20, 0x01	; 1
    1430:	0e 94 c7 06 	call	0xd8e	; 0xd8e <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	88 2f       	mov	r24, r24
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	9c 01       	movw	r18, r24
    143c:	2c 5f       	subi	r18, 0xFC	; 252
    143e:	3f 4f       	sbci	r19, 0xFF	; 255
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	02 c0       	rjmp	.+4      	; 0x144a <KEYPAD_getPressedKey+0x40>
    1446:	88 0f       	add	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	2a 95       	dec	r18
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <KEYPAD_getPressedKey+0x3c>
    144e:	80 95       	com	r24
    1450:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1452:	82 e0       	ldi	r24, 0x02	; 2
    1454:	69 81       	ldd	r22, Y+1	; 0x01
    1456:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    145a:	1a 82       	std	Y+2, r1	; 0x02
    145c:	1c c0       	rjmp	.+56     	; 0x1496 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    145e:	82 e0       	ldi	r24, 0x02	; 2
    1460:	6a 81       	ldd	r22, Y+2	; 0x02
    1462:	0e 94 9d 08 	call	0x113a	; 0x113a <GPIO_readPin>
    1466:	88 23       	and	r24, r24
    1468:	99 f4       	brne	.+38     	; 0x1490 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	88 2f       	mov	r24, r24
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	98 2f       	mov	r25, r24
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	89 0f       	add	r24, r25
    147e:	8f 5f       	subi	r24, 0xFF	; 255
    1480:	0e 94 56 0a 	call	0x14ac	; 0x14ac <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	8f 5f       	subi	r24, 0xFF	; 255
    1494:	8a 83       	std	Y+2, r24	; 0x02
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	84 30       	cpi	r24, 0x04	; 4
    149a:	08 f3       	brcs	.-62     	; 0x145e <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	8f 5f       	subi	r24, 0xFF	; 255
    14a0:	8b 83       	std	Y+3, r24	; 0x03
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	84 30       	cpi	r24, 0x04	; 4
    14a6:	08 f4       	brcc	.+2      	; 0x14aa <KEYPAD_getPressedKey+0xa0>
    14a8:	b9 cf       	rjmp	.-142    	; 0x141c <KEYPAD_getPressedKey+0x12>
    14aa:	b6 cf       	rjmp	.-148    	; 0x1418 <KEYPAD_getPressedKey+0xe>

000014ac <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <KEYPAD_4x4_adjustKeyNumber+0x6>
    14b2:	00 d0       	rcall	.+0      	; 0x14b4 <KEYPAD_4x4_adjustKeyNumber+0x8>
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    14ba:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	3c 83       	std	Y+4, r19	; 0x04
    14c4:	2b 83       	std	Y+3, r18	; 0x03
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ca:	88 30       	cpi	r24, 0x08	; 8
    14cc:	91 05       	cpc	r25, r1
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <KEYPAD_4x4_adjustKeyNumber+0x26>
    14d0:	70 c0       	rjmp	.+224    	; 0x15b2 <KEYPAD_4x4_adjustKeyNumber+0x106>
    14d2:	2b 81       	ldd	r18, Y+3	; 0x03
    14d4:	3c 81       	ldd	r19, Y+4	; 0x04
    14d6:	29 30       	cpi	r18, 0x09	; 9
    14d8:	31 05       	cpc	r19, r1
    14da:	5c f5       	brge	.+86     	; 0x1532 <KEYPAD_4x4_adjustKeyNumber+0x86>
    14dc:	8b 81       	ldd	r24, Y+3	; 0x03
    14de:	9c 81       	ldd	r25, Y+4	; 0x04
    14e0:	84 30       	cpi	r24, 0x04	; 4
    14e2:	91 05       	cpc	r25, r1
    14e4:	09 f4       	brne	.+2      	; 0x14e8 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    14e6:	59 c0       	rjmp	.+178    	; 0x159a <KEYPAD_4x4_adjustKeyNumber+0xee>
    14e8:	2b 81       	ldd	r18, Y+3	; 0x03
    14ea:	3c 81       	ldd	r19, Y+4	; 0x04
    14ec:	25 30       	cpi	r18, 0x05	; 5
    14ee:	31 05       	cpc	r19, r1
    14f0:	9c f4       	brge	.+38     	; 0x1518 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	9c 81       	ldd	r25, Y+4	; 0x04
    14f6:	82 30       	cpi	r24, 0x02	; 2
    14f8:	91 05       	cpc	r25, r1
    14fa:	09 f4       	brne	.+2      	; 0x14fe <KEYPAD_4x4_adjustKeyNumber+0x52>
    14fc:	48 c0       	rjmp	.+144    	; 0x158e <KEYPAD_4x4_adjustKeyNumber+0xe2>
    14fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1500:	3c 81       	ldd	r19, Y+4	; 0x04
    1502:	23 30       	cpi	r18, 0x03	; 3
    1504:	31 05       	cpc	r19, r1
    1506:	0c f0       	brlt	.+2      	; 0x150a <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1508:	45 c0       	rjmp	.+138    	; 0x1594 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	9c 81       	ldd	r25, Y+4	; 0x04
    150e:	81 30       	cpi	r24, 0x01	; 1
    1510:	91 05       	cpc	r25, r1
    1512:	09 f4       	brne	.+2      	; 0x1516 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1514:	39 c0       	rjmp	.+114    	; 0x1588 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1516:	67 c0       	rjmp	.+206    	; 0x15e6 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1518:	2b 81       	ldd	r18, Y+3	; 0x03
    151a:	3c 81       	ldd	r19, Y+4	; 0x04
    151c:	26 30       	cpi	r18, 0x06	; 6
    151e:	31 05       	cpc	r19, r1
    1520:	09 f4       	brne	.+2      	; 0x1524 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1522:	41 c0       	rjmp	.+130    	; 0x15a6 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	9c 81       	ldd	r25, Y+4	; 0x04
    1528:	87 30       	cpi	r24, 0x07	; 7
    152a:	91 05       	cpc	r25, r1
    152c:	0c f0       	brlt	.+2      	; 0x1530 <KEYPAD_4x4_adjustKeyNumber+0x84>
    152e:	3e c0       	rjmp	.+124    	; 0x15ac <KEYPAD_4x4_adjustKeyNumber+0x100>
    1530:	37 c0       	rjmp	.+110    	; 0x15a0 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1532:	2b 81       	ldd	r18, Y+3	; 0x03
    1534:	3c 81       	ldd	r19, Y+4	; 0x04
    1536:	2c 30       	cpi	r18, 0x0C	; 12
    1538:	31 05       	cpc	r19, r1
    153a:	09 f4       	brne	.+2      	; 0x153e <KEYPAD_4x4_adjustKeyNumber+0x92>
    153c:	46 c0       	rjmp	.+140    	; 0x15ca <KEYPAD_4x4_adjustKeyNumber+0x11e>
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	9c 81       	ldd	r25, Y+4	; 0x04
    1542:	8d 30       	cpi	r24, 0x0D	; 13
    1544:	91 05       	cpc	r25, r1
    1546:	5c f4       	brge	.+22     	; 0x155e <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1548:	2b 81       	ldd	r18, Y+3	; 0x03
    154a:	3c 81       	ldd	r19, Y+4	; 0x04
    154c:	2a 30       	cpi	r18, 0x0A	; 10
    154e:	31 05       	cpc	r19, r1
    1550:	b1 f1       	breq	.+108    	; 0x15be <KEYPAD_4x4_adjustKeyNumber+0x112>
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	9c 81       	ldd	r25, Y+4	; 0x04
    1556:	8b 30       	cpi	r24, 0x0B	; 11
    1558:	91 05       	cpc	r25, r1
    155a:	a4 f5       	brge	.+104    	; 0x15c4 <KEYPAD_4x4_adjustKeyNumber+0x118>
    155c:	2d c0       	rjmp	.+90     	; 0x15b8 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    155e:	2b 81       	ldd	r18, Y+3	; 0x03
    1560:	3c 81       	ldd	r19, Y+4	; 0x04
    1562:	2e 30       	cpi	r18, 0x0E	; 14
    1564:	31 05       	cpc	r19, r1
    1566:	b9 f1       	breq	.+110    	; 0x15d6 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	9c 81       	ldd	r25, Y+4	; 0x04
    156c:	8e 30       	cpi	r24, 0x0E	; 14
    156e:	91 05       	cpc	r25, r1
    1570:	7c f1       	brlt	.+94     	; 0x15d0 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1572:	2b 81       	ldd	r18, Y+3	; 0x03
    1574:	3c 81       	ldd	r19, Y+4	; 0x04
    1576:	2f 30       	cpi	r18, 0x0F	; 15
    1578:	31 05       	cpc	r19, r1
    157a:	79 f1       	breq	.+94     	; 0x15da <KEYPAD_4x4_adjustKeyNumber+0x12e>
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	9c 81       	ldd	r25, Y+4	; 0x04
    1580:	80 31       	cpi	r24, 0x10	; 16
    1582:	91 05       	cpc	r25, r1
    1584:	69 f1       	breq	.+90     	; 0x15e0 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1586:	2f c0       	rjmp	.+94     	; 0x15e6 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1588:	87 e0       	ldi	r24, 0x07	; 7
    158a:	89 83       	std	Y+1, r24	; 0x01
    158c:	2e c0       	rjmp	.+92     	; 0x15ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    158e:	88 e0       	ldi	r24, 0x08	; 8
    1590:	89 83       	std	Y+1, r24	; 0x01
    1592:	2b c0       	rjmp	.+86     	; 0x15ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1594:	89 e0       	ldi	r24, 0x09	; 9
    1596:	89 83       	std	Y+1, r24	; 0x01
    1598:	28 c0       	rjmp	.+80     	; 0x15ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '/'; /* ASCII Code of '/' */
    159a:	8f e2       	ldi	r24, 0x2F	; 47
    159c:	89 83       	std	Y+1, r24	; 0x01
    159e:	25 c0       	rjmp	.+74     	; 0x15ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    15a0:	84 e0       	ldi	r24, 0x04	; 4
    15a2:	89 83       	std	Y+1, r24	; 0x01
    15a4:	22 c0       	rjmp	.+68     	; 0x15ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    15a6:	85 e0       	ldi	r24, 0x05	; 5
    15a8:	89 83       	std	Y+1, r24	; 0x01
    15aa:	1f c0       	rjmp	.+62     	; 0x15ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    15ac:	86 e0       	ldi	r24, 0x06	; 6
    15ae:	89 83       	std	Y+1, r24	; 0x01
    15b0:	1c c0       	rjmp	.+56     	; 0x15ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    15b2:	8a e2       	ldi	r24, 0x2A	; 42
    15b4:	89 83       	std	Y+1, r24	; 0x01
    15b6:	19 c0       	rjmp	.+50     	; 0x15ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	89 83       	std	Y+1, r24	; 0x01
    15bc:	16 c0       	rjmp	.+44     	; 0x15ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    15be:	82 e0       	ldi	r24, 0x02	; 2
    15c0:	89 83       	std	Y+1, r24	; 0x01
    15c2:	13 c0       	rjmp	.+38     	; 0x15ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    15c4:	83 e0       	ldi	r24, 0x03	; 3
    15c6:	89 83       	std	Y+1, r24	; 0x01
    15c8:	10 c0       	rjmp	.+32     	; 0x15ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    15ca:	8d e2       	ldi	r24, 0x2D	; 45
    15cc:	89 83       	std	Y+1, r24	; 0x01
    15ce:	0d c0       	rjmp	.+26     	; 0x15ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    15d0:	8d e0       	ldi	r24, 0x0D	; 13
    15d2:	89 83       	std	Y+1, r24	; 0x01
    15d4:	0a c0       	rjmp	.+20     	; 0x15ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    15d6:	19 82       	std	Y+1, r1	; 0x01
    15d8:	08 c0       	rjmp	.+16     	; 0x15ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    15da:	8d e3       	ldi	r24, 0x3D	; 61
    15dc:	89 83       	std	Y+1, r24	; 0x01
    15de:	05 c0       	rjmp	.+10     	; 0x15ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    15e0:	8b e2       	ldi	r24, 0x2B	; 43
    15e2:	89 83       	std	Y+1, r24	; 0x01
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
} 
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	cf 91       	pop	r28
    15f6:	df 91       	pop	r29
    15f8:	08 95       	ret

000015fa <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	64 e0       	ldi	r22, 0x04	; 4
    1606:	41 e0       	ldi	r20, 0x01	; 1
    1608:	0e 94 c7 06 	call	0xd8e	; 0xd8e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	63 e0       	ldi	r22, 0x03	; 3
    1610:	41 e0       	ldi	r20, 0x01	; 1
    1612:	0e 94 c7 06 	call	0xd8e	; 0xd8e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	62 e0       	ldi	r22, 0x02	; 2
    161a:	41 e0       	ldi	r20, 0x01	; 1
    161c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	6f ef       	ldi	r22, 0xFF	; 255
    1624:	0e 94 38 09 	call	0x1270	; 0x1270 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1628:	88 e3       	ldi	r24, 0x38	; 56
    162a:	0e 94 20 0b 	call	0x1640	; 0x1640 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    162e:	8c e0       	ldi	r24, 0x0C	; 12
    1630:	0e 94 20 0b 	call	0x1640	; 0x1640 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	0e 94 20 0b 	call	0x1640	; 0x1640 <LCD_sendCommand>
}
    163a:	cf 91       	pop	r28
    163c:	df 91       	pop	r29
    163e:	08 95       	ret

00001640 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1640:	df 93       	push	r29
    1642:	cf 93       	push	r28
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
    1648:	e9 97       	sbiw	r28, 0x39	; 57
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	f8 94       	cli
    164e:	de bf       	out	0x3e, r29	; 62
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	cd bf       	out	0x3d, r28	; 61
    1654:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	64 e0       	ldi	r22, 0x04	; 4
    165a:	40 e0       	ldi	r20, 0x00	; 0
    165c:	0e 94 b2 07 	call	0xf64	; 0xf64 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	63 e0       	ldi	r22, 0x03	; 3
    1664:	40 e0       	ldi	r20, 0x00	; 0
    1666:	0e 94 b2 07 	call	0xf64	; 0xf64 <GPIO_writePin>
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	a0 e8       	ldi	r26, 0x80	; 128
    1670:	bf e3       	ldi	r27, 0x3F	; 63
    1672:	8d ab       	std	Y+53, r24	; 0x35
    1674:	9e ab       	std	Y+54, r25	; 0x36
    1676:	af ab       	std	Y+55, r26	; 0x37
    1678:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    167a:	6d a9       	ldd	r22, Y+53	; 0x35
    167c:	7e a9       	ldd	r23, Y+54	; 0x36
    167e:	8f a9       	ldd	r24, Y+55	; 0x37
    1680:	98 ad       	ldd	r25, Y+56	; 0x38
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	4a e7       	ldi	r20, 0x7A	; 122
    1688:	53 e4       	ldi	r21, 0x43	; 67
    168a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	89 ab       	std	Y+49, r24	; 0x31
    1694:	9a ab       	std	Y+50, r25	; 0x32
    1696:	ab ab       	std	Y+51, r26	; 0x33
    1698:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    169a:	69 a9       	ldd	r22, Y+49	; 0x31
    169c:	7a a9       	ldd	r23, Y+50	; 0x32
    169e:	8b a9       	ldd	r24, Y+51	; 0x33
    16a0:	9c a9       	ldd	r25, Y+52	; 0x34
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	40 e8       	ldi	r20, 0x80	; 128
    16a8:	5f e3       	ldi	r21, 0x3F	; 63
    16aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ae:	88 23       	and	r24, r24
    16b0:	2c f4       	brge	.+10     	; 0x16bc <LCD_sendCommand+0x7c>
		__ticks = 1;
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	98 ab       	std	Y+48, r25	; 0x30
    16b8:	8f a7       	std	Y+47, r24	; 0x2f
    16ba:	3f c0       	rjmp	.+126    	; 0x173a <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    16bc:	69 a9       	ldd	r22, Y+49	; 0x31
    16be:	7a a9       	ldd	r23, Y+50	; 0x32
    16c0:	8b a9       	ldd	r24, Y+51	; 0x33
    16c2:	9c a9       	ldd	r25, Y+52	; 0x34
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	3f ef       	ldi	r19, 0xFF	; 255
    16c8:	4f e7       	ldi	r20, 0x7F	; 127
    16ca:	57 e4       	ldi	r21, 0x47	; 71
    16cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16d0:	18 16       	cp	r1, r24
    16d2:	4c f5       	brge	.+82     	; 0x1726 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d4:	6d a9       	ldd	r22, Y+53	; 0x35
    16d6:	7e a9       	ldd	r23, Y+54	; 0x36
    16d8:	8f a9       	ldd	r24, Y+55	; 0x37
    16da:	98 ad       	ldd	r25, Y+56	; 0x38
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	40 e2       	ldi	r20, 0x20	; 32
    16e2:	51 e4       	ldi	r21, 0x41	; 65
    16e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	bc 01       	movw	r22, r24
    16ee:	cd 01       	movw	r24, r26
    16f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	98 ab       	std	Y+48, r25	; 0x30
    16fa:	8f a7       	std	Y+47, r24	; 0x2f
    16fc:	0f c0       	rjmp	.+30     	; 0x171c <LCD_sendCommand+0xdc>
    16fe:	89 e1       	ldi	r24, 0x19	; 25
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	9e a7       	std	Y+46, r25	; 0x2e
    1704:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1706:	8d a5       	ldd	r24, Y+45	; 0x2d
    1708:	9e a5       	ldd	r25, Y+46	; 0x2e
    170a:	01 97       	sbiw	r24, 0x01	; 1
    170c:	f1 f7       	brne	.-4      	; 0x170a <LCD_sendCommand+0xca>
    170e:	9e a7       	std	Y+46, r25	; 0x2e
    1710:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1712:	8f a5       	ldd	r24, Y+47	; 0x2f
    1714:	98 a9       	ldd	r25, Y+48	; 0x30
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	98 ab       	std	Y+48, r25	; 0x30
    171a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171c:	8f a5       	ldd	r24, Y+47	; 0x2f
    171e:	98 a9       	ldd	r25, Y+48	; 0x30
    1720:	00 97       	sbiw	r24, 0x00	; 0
    1722:	69 f7       	brne	.-38     	; 0x16fe <LCD_sendCommand+0xbe>
    1724:	14 c0       	rjmp	.+40     	; 0x174e <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1726:	69 a9       	ldd	r22, Y+49	; 0x31
    1728:	7a a9       	ldd	r23, Y+50	; 0x32
    172a:	8b a9       	ldd	r24, Y+51	; 0x33
    172c:	9c a9       	ldd	r25, Y+52	; 0x34
    172e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	98 ab       	std	Y+48, r25	; 0x30
    1738:	8f a7       	std	Y+47, r24	; 0x2f
    173a:	8f a5       	ldd	r24, Y+47	; 0x2f
    173c:	98 a9       	ldd	r25, Y+48	; 0x30
    173e:	9c a7       	std	Y+44, r25	; 0x2c
    1740:	8b a7       	std	Y+43, r24	; 0x2b
    1742:	8b a5       	ldd	r24, Y+43	; 0x2b
    1744:	9c a5       	ldd	r25, Y+44	; 0x2c
    1746:	01 97       	sbiw	r24, 0x01	; 1
    1748:	f1 f7       	brne	.-4      	; 0x1746 <LCD_sendCommand+0x106>
    174a:	9c a7       	std	Y+44, r25	; 0x2c
    174c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	62 e0       	ldi	r22, 0x02	; 2
    1752:	41 e0       	ldi	r20, 0x01	; 1
    1754:	0e 94 b2 07 	call	0xf64	; 0xf64 <GPIO_writePin>
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	a0 e8       	ldi	r26, 0x80	; 128
    175e:	bf e3       	ldi	r27, 0x3F	; 63
    1760:	8f a3       	std	Y+39, r24	; 0x27
    1762:	98 a7       	std	Y+40, r25	; 0x28
    1764:	a9 a7       	std	Y+41, r26	; 0x29
    1766:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1768:	6f a1       	ldd	r22, Y+39	; 0x27
    176a:	78 a5       	ldd	r23, Y+40	; 0x28
    176c:	89 a5       	ldd	r24, Y+41	; 0x29
    176e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	4a e7       	ldi	r20, 0x7A	; 122
    1776:	53 e4       	ldi	r21, 0x43	; 67
    1778:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177c:	dc 01       	movw	r26, r24
    177e:	cb 01       	movw	r24, r22
    1780:	8b a3       	std	Y+35, r24	; 0x23
    1782:	9c a3       	std	Y+36, r25	; 0x24
    1784:	ad a3       	std	Y+37, r26	; 0x25
    1786:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1788:	6b a1       	ldd	r22, Y+35	; 0x23
    178a:	7c a1       	ldd	r23, Y+36	; 0x24
    178c:	8d a1       	ldd	r24, Y+37	; 0x25
    178e:	9e a1       	ldd	r25, Y+38	; 0x26
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	40 e8       	ldi	r20, 0x80	; 128
    1796:	5f e3       	ldi	r21, 0x3F	; 63
    1798:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    179c:	88 23       	and	r24, r24
    179e:	2c f4       	brge	.+10     	; 0x17aa <LCD_sendCommand+0x16a>
		__ticks = 1;
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	9a a3       	std	Y+34, r25	; 0x22
    17a6:	89 a3       	std	Y+33, r24	; 0x21
    17a8:	3f c0       	rjmp	.+126    	; 0x1828 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    17aa:	6b a1       	ldd	r22, Y+35	; 0x23
    17ac:	7c a1       	ldd	r23, Y+36	; 0x24
    17ae:	8d a1       	ldd	r24, Y+37	; 0x25
    17b0:	9e a1       	ldd	r25, Y+38	; 0x26
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	3f ef       	ldi	r19, 0xFF	; 255
    17b6:	4f e7       	ldi	r20, 0x7F	; 127
    17b8:	57 e4       	ldi	r21, 0x47	; 71
    17ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17be:	18 16       	cp	r1, r24
    17c0:	4c f5       	brge	.+82     	; 0x1814 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c2:	6f a1       	ldd	r22, Y+39	; 0x27
    17c4:	78 a5       	ldd	r23, Y+40	; 0x28
    17c6:	89 a5       	ldd	r24, Y+41	; 0x29
    17c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	40 e2       	ldi	r20, 0x20	; 32
    17d0:	51 e4       	ldi	r21, 0x41	; 65
    17d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	bc 01       	movw	r22, r24
    17dc:	cd 01       	movw	r24, r26
    17de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	9a a3       	std	Y+34, r25	; 0x22
    17e8:	89 a3       	std	Y+33, r24	; 0x21
    17ea:	0f c0       	rjmp	.+30     	; 0x180a <LCD_sendCommand+0x1ca>
    17ec:	89 e1       	ldi	r24, 0x19	; 25
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	98 a3       	std	Y+32, r25	; 0x20
    17f2:	8f 8f       	std	Y+31, r24	; 0x1f
    17f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17f6:	98 a1       	ldd	r25, Y+32	; 0x20
    17f8:	01 97       	sbiw	r24, 0x01	; 1
    17fa:	f1 f7       	brne	.-4      	; 0x17f8 <LCD_sendCommand+0x1b8>
    17fc:	98 a3       	std	Y+32, r25	; 0x20
    17fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1800:	89 a1       	ldd	r24, Y+33	; 0x21
    1802:	9a a1       	ldd	r25, Y+34	; 0x22
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	9a a3       	std	Y+34, r25	; 0x22
    1808:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    180a:	89 a1       	ldd	r24, Y+33	; 0x21
    180c:	9a a1       	ldd	r25, Y+34	; 0x22
    180e:	00 97       	sbiw	r24, 0x00	; 0
    1810:	69 f7       	brne	.-38     	; 0x17ec <LCD_sendCommand+0x1ac>
    1812:	14 c0       	rjmp	.+40     	; 0x183c <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1814:	6b a1       	ldd	r22, Y+35	; 0x23
    1816:	7c a1       	ldd	r23, Y+36	; 0x24
    1818:	8d a1       	ldd	r24, Y+37	; 0x25
    181a:	9e a1       	ldd	r25, Y+38	; 0x26
    181c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	9a a3       	std	Y+34, r25	; 0x22
    1826:	89 a3       	std	Y+33, r24	; 0x21
    1828:	89 a1       	ldd	r24, Y+33	; 0x21
    182a:	9a a1       	ldd	r25, Y+34	; 0x22
    182c:	9e 8f       	std	Y+30, r25	; 0x1e
    182e:	8d 8f       	std	Y+29, r24	; 0x1d
    1830:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1832:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	f1 f7       	brne	.-4      	; 0x1834 <LCD_sendCommand+0x1f4>
    1838:	9e 8f       	std	Y+30, r25	; 0x1e
    183a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	69 ad       	ldd	r22, Y+57	; 0x39
    1840:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <GPIO_writePort>
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	a0 e8       	ldi	r26, 0x80	; 128
    184a:	bf e3       	ldi	r27, 0x3F	; 63
    184c:	89 8f       	std	Y+25, r24	; 0x19
    184e:	9a 8f       	std	Y+26, r25	; 0x1a
    1850:	ab 8f       	std	Y+27, r26	; 0x1b
    1852:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1854:	69 8d       	ldd	r22, Y+25	; 0x19
    1856:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1858:	8b 8d       	ldd	r24, Y+27	; 0x1b
    185a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	4a e7       	ldi	r20, 0x7A	; 122
    1862:	53 e4       	ldi	r21, 0x43	; 67
    1864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	8d 8b       	std	Y+21, r24	; 0x15
    186e:	9e 8b       	std	Y+22, r25	; 0x16
    1870:	af 8b       	std	Y+23, r26	; 0x17
    1872:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1874:	6d 89       	ldd	r22, Y+21	; 0x15
    1876:	7e 89       	ldd	r23, Y+22	; 0x16
    1878:	8f 89       	ldd	r24, Y+23	; 0x17
    187a:	98 8d       	ldd	r25, Y+24	; 0x18
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	40 e8       	ldi	r20, 0x80	; 128
    1882:	5f e3       	ldi	r21, 0x3F	; 63
    1884:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1888:	88 23       	and	r24, r24
    188a:	2c f4       	brge	.+10     	; 0x1896 <LCD_sendCommand+0x256>
		__ticks = 1;
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	9c 8b       	std	Y+20, r25	; 0x14
    1892:	8b 8b       	std	Y+19, r24	; 0x13
    1894:	3f c0       	rjmp	.+126    	; 0x1914 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1896:	6d 89       	ldd	r22, Y+21	; 0x15
    1898:	7e 89       	ldd	r23, Y+22	; 0x16
    189a:	8f 89       	ldd	r24, Y+23	; 0x17
    189c:	98 8d       	ldd	r25, Y+24	; 0x18
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	3f ef       	ldi	r19, 0xFF	; 255
    18a2:	4f e7       	ldi	r20, 0x7F	; 127
    18a4:	57 e4       	ldi	r21, 0x47	; 71
    18a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18aa:	18 16       	cp	r1, r24
    18ac:	4c f5       	brge	.+82     	; 0x1900 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ae:	69 8d       	ldd	r22, Y+25	; 0x19
    18b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	40 e2       	ldi	r20, 0x20	; 32
    18bc:	51 e4       	ldi	r21, 0x41	; 65
    18be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	bc 01       	movw	r22, r24
    18c8:	cd 01       	movw	r24, r26
    18ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	9c 8b       	std	Y+20, r25	; 0x14
    18d4:	8b 8b       	std	Y+19, r24	; 0x13
    18d6:	0f c0       	rjmp	.+30     	; 0x18f6 <LCD_sendCommand+0x2b6>
    18d8:	89 e1       	ldi	r24, 0x19	; 25
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	9a 8b       	std	Y+18, r25	; 0x12
    18de:	89 8b       	std	Y+17, r24	; 0x11
    18e0:	89 89       	ldd	r24, Y+17	; 0x11
    18e2:	9a 89       	ldd	r25, Y+18	; 0x12
    18e4:	01 97       	sbiw	r24, 0x01	; 1
    18e6:	f1 f7       	brne	.-4      	; 0x18e4 <LCD_sendCommand+0x2a4>
    18e8:	9a 8b       	std	Y+18, r25	; 0x12
    18ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ec:	8b 89       	ldd	r24, Y+19	; 0x13
    18ee:	9c 89       	ldd	r25, Y+20	; 0x14
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	9c 8b       	std	Y+20, r25	; 0x14
    18f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f6:	8b 89       	ldd	r24, Y+19	; 0x13
    18f8:	9c 89       	ldd	r25, Y+20	; 0x14
    18fa:	00 97       	sbiw	r24, 0x00	; 0
    18fc:	69 f7       	brne	.-38     	; 0x18d8 <LCD_sendCommand+0x298>
    18fe:	14 c0       	rjmp	.+40     	; 0x1928 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1900:	6d 89       	ldd	r22, Y+21	; 0x15
    1902:	7e 89       	ldd	r23, Y+22	; 0x16
    1904:	8f 89       	ldd	r24, Y+23	; 0x17
    1906:	98 8d       	ldd	r25, Y+24	; 0x18
    1908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	9c 8b       	std	Y+20, r25	; 0x14
    1912:	8b 8b       	std	Y+19, r24	; 0x13
    1914:	8b 89       	ldd	r24, Y+19	; 0x13
    1916:	9c 89       	ldd	r25, Y+20	; 0x14
    1918:	98 8b       	std	Y+16, r25	; 0x10
    191a:	8f 87       	std	Y+15, r24	; 0x0f
    191c:	8f 85       	ldd	r24, Y+15	; 0x0f
    191e:	98 89       	ldd	r25, Y+16	; 0x10
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	f1 f7       	brne	.-4      	; 0x1920 <LCD_sendCommand+0x2e0>
    1924:	98 8b       	std	Y+16, r25	; 0x10
    1926:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	62 e0       	ldi	r22, 0x02	; 2
    192c:	40 e0       	ldi	r20, 0x00	; 0
    192e:	0e 94 b2 07 	call	0xf64	; 0xf64 <GPIO_writePin>
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	a0 e8       	ldi	r26, 0x80	; 128
    1938:	bf e3       	ldi	r27, 0x3F	; 63
    193a:	8b 87       	std	Y+11, r24	; 0x0b
    193c:	9c 87       	std	Y+12, r25	; 0x0c
    193e:	ad 87       	std	Y+13, r26	; 0x0d
    1940:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1942:	6b 85       	ldd	r22, Y+11	; 0x0b
    1944:	7c 85       	ldd	r23, Y+12	; 0x0c
    1946:	8d 85       	ldd	r24, Y+13	; 0x0d
    1948:	9e 85       	ldd	r25, Y+14	; 0x0e
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	4a e7       	ldi	r20, 0x7A	; 122
    1950:	53 e4       	ldi	r21, 0x43	; 67
    1952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	8f 83       	std	Y+7, r24	; 0x07
    195c:	98 87       	std	Y+8, r25	; 0x08
    195e:	a9 87       	std	Y+9, r26	; 0x09
    1960:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1962:	6f 81       	ldd	r22, Y+7	; 0x07
    1964:	78 85       	ldd	r23, Y+8	; 0x08
    1966:	89 85       	ldd	r24, Y+9	; 0x09
    1968:	9a 85       	ldd	r25, Y+10	; 0x0a
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e8       	ldi	r20, 0x80	; 128
    1970:	5f e3       	ldi	r21, 0x3F	; 63
    1972:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1976:	88 23       	and	r24, r24
    1978:	2c f4       	brge	.+10     	; 0x1984 <LCD_sendCommand+0x344>
		__ticks = 1;
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	9e 83       	std	Y+6, r25	; 0x06
    1980:	8d 83       	std	Y+5, r24	; 0x05
    1982:	3f c0       	rjmp	.+126    	; 0x1a02 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1984:	6f 81       	ldd	r22, Y+7	; 0x07
    1986:	78 85       	ldd	r23, Y+8	; 0x08
    1988:	89 85       	ldd	r24, Y+9	; 0x09
    198a:	9a 85       	ldd	r25, Y+10	; 0x0a
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	3f ef       	ldi	r19, 0xFF	; 255
    1990:	4f e7       	ldi	r20, 0x7F	; 127
    1992:	57 e4       	ldi	r21, 0x47	; 71
    1994:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1998:	18 16       	cp	r1, r24
    199a:	4c f5       	brge	.+82     	; 0x19ee <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    199c:	6b 85       	ldd	r22, Y+11	; 0x0b
    199e:	7c 85       	ldd	r23, Y+12	; 0x0c
    19a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	40 e2       	ldi	r20, 0x20	; 32
    19aa:	51 e4       	ldi	r21, 0x41	; 65
    19ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	bc 01       	movw	r22, r24
    19b6:	cd 01       	movw	r24, r26
    19b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	9e 83       	std	Y+6, r25	; 0x06
    19c2:	8d 83       	std	Y+5, r24	; 0x05
    19c4:	0f c0       	rjmp	.+30     	; 0x19e4 <LCD_sendCommand+0x3a4>
    19c6:	89 e1       	ldi	r24, 0x19	; 25
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	9c 83       	std	Y+4, r25	; 0x04
    19cc:	8b 83       	std	Y+3, r24	; 0x03
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	9c 81       	ldd	r25, Y+4	; 0x04
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	f1 f7       	brne	.-4      	; 0x19d2 <LCD_sendCommand+0x392>
    19d6:	9c 83       	std	Y+4, r25	; 0x04
    19d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19da:	8d 81       	ldd	r24, Y+5	; 0x05
    19dc:	9e 81       	ldd	r25, Y+6	; 0x06
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	9e 83       	std	Y+6, r25	; 0x06
    19e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e4:	8d 81       	ldd	r24, Y+5	; 0x05
    19e6:	9e 81       	ldd	r25, Y+6	; 0x06
    19e8:	00 97       	sbiw	r24, 0x00	; 0
    19ea:	69 f7       	brne	.-38     	; 0x19c6 <LCD_sendCommand+0x386>
    19ec:	14 c0       	rjmp	.+40     	; 0x1a16 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ee:	6f 81       	ldd	r22, Y+7	; 0x07
    19f0:	78 85       	ldd	r23, Y+8	; 0x08
    19f2:	89 85       	ldd	r24, Y+9	; 0x09
    19f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	9e 83       	std	Y+6, r25	; 0x06
    1a00:	8d 83       	std	Y+5, r24	; 0x05
    1a02:	8d 81       	ldd	r24, Y+5	; 0x05
    1a04:	9e 81       	ldd	r25, Y+6	; 0x06
    1a06:	9a 83       	std	Y+2, r25	; 0x02
    1a08:	89 83       	std	Y+1, r24	; 0x01
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01
    1a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	f1 f7       	brne	.-4      	; 0x1a0e <LCD_sendCommand+0x3ce>
    1a12:	9a 83       	std	Y+2, r25	; 0x02
    1a14:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1a16:	e9 96       	adiw	r28, 0x39	; 57
    1a18:	0f b6       	in	r0, 0x3f	; 63
    1a1a:	f8 94       	cli
    1a1c:	de bf       	out	0x3e, r29	; 62
    1a1e:	0f be       	out	0x3f, r0	; 63
    1a20:	cd bf       	out	0x3d, r28	; 61
    1a22:	cf 91       	pop	r28
    1a24:	df 91       	pop	r29
    1a26:	08 95       	ret

00001a28 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1a28:	df 93       	push	r29
    1a2a:	cf 93       	push	r28
    1a2c:	cd b7       	in	r28, 0x3d	; 61
    1a2e:	de b7       	in	r29, 0x3e	; 62
    1a30:	e9 97       	sbiw	r28, 0x39	; 57
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	f8 94       	cli
    1a36:	de bf       	out	0x3e, r29	; 62
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	cd bf       	out	0x3d, r28	; 61
    1a3c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	64 e0       	ldi	r22, 0x04	; 4
    1a42:	41 e0       	ldi	r20, 0x01	; 1
    1a44:	0e 94 b2 07 	call	0xf64	; 0xf64 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	63 e0       	ldi	r22, 0x03	; 3
    1a4c:	40 e0       	ldi	r20, 0x00	; 0
    1a4e:	0e 94 b2 07 	call	0xf64	; 0xf64 <GPIO_writePin>
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	a0 e8       	ldi	r26, 0x80	; 128
    1a58:	bf e3       	ldi	r27, 0x3F	; 63
    1a5a:	8d ab       	std	Y+53, r24	; 0x35
    1a5c:	9e ab       	std	Y+54, r25	; 0x36
    1a5e:	af ab       	std	Y+55, r26	; 0x37
    1a60:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a62:	6d a9       	ldd	r22, Y+53	; 0x35
    1a64:	7e a9       	ldd	r23, Y+54	; 0x36
    1a66:	8f a9       	ldd	r24, Y+55	; 0x37
    1a68:	98 ad       	ldd	r25, Y+56	; 0x38
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	4a e7       	ldi	r20, 0x7A	; 122
    1a70:	53 e4       	ldi	r21, 0x43	; 67
    1a72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	89 ab       	std	Y+49, r24	; 0x31
    1a7c:	9a ab       	std	Y+50, r25	; 0x32
    1a7e:	ab ab       	std	Y+51, r26	; 0x33
    1a80:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a82:	69 a9       	ldd	r22, Y+49	; 0x31
    1a84:	7a a9       	ldd	r23, Y+50	; 0x32
    1a86:	8b a9       	ldd	r24, Y+51	; 0x33
    1a88:	9c a9       	ldd	r25, Y+52	; 0x34
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	40 e8       	ldi	r20, 0x80	; 128
    1a90:	5f e3       	ldi	r21, 0x3F	; 63
    1a92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a96:	88 23       	and	r24, r24
    1a98:	2c f4       	brge	.+10     	; 0x1aa4 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	98 ab       	std	Y+48, r25	; 0x30
    1aa0:	8f a7       	std	Y+47, r24	; 0x2f
    1aa2:	3f c0       	rjmp	.+126    	; 0x1b22 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    1aa4:	69 a9       	ldd	r22, Y+49	; 0x31
    1aa6:	7a a9       	ldd	r23, Y+50	; 0x32
    1aa8:	8b a9       	ldd	r24, Y+51	; 0x33
    1aaa:	9c a9       	ldd	r25, Y+52	; 0x34
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	3f ef       	ldi	r19, 0xFF	; 255
    1ab0:	4f e7       	ldi	r20, 0x7F	; 127
    1ab2:	57 e4       	ldi	r21, 0x47	; 71
    1ab4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ab8:	18 16       	cp	r1, r24
    1aba:	4c f5       	brge	.+82     	; 0x1b0e <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1abc:	6d a9       	ldd	r22, Y+53	; 0x35
    1abe:	7e a9       	ldd	r23, Y+54	; 0x36
    1ac0:	8f a9       	ldd	r24, Y+55	; 0x37
    1ac2:	98 ad       	ldd	r25, Y+56	; 0x38
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	40 e2       	ldi	r20, 0x20	; 32
    1aca:	51 e4       	ldi	r21, 0x41	; 65
    1acc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	bc 01       	movw	r22, r24
    1ad6:	cd 01       	movw	r24, r26
    1ad8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	98 ab       	std	Y+48, r25	; 0x30
    1ae2:	8f a7       	std	Y+47, r24	; 0x2f
    1ae4:	0f c0       	rjmp	.+30     	; 0x1b04 <LCD_displayCharacter+0xdc>
    1ae6:	89 e1       	ldi	r24, 0x19	; 25
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	9e a7       	std	Y+46, r25	; 0x2e
    1aec:	8d a7       	std	Y+45, r24	; 0x2d
    1aee:	8d a5       	ldd	r24, Y+45	; 0x2d
    1af0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	f1 f7       	brne	.-4      	; 0x1af2 <LCD_displayCharacter+0xca>
    1af6:	9e a7       	std	Y+46, r25	; 0x2e
    1af8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1afc:	98 a9       	ldd	r25, Y+48	; 0x30
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	98 ab       	std	Y+48, r25	; 0x30
    1b02:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b04:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b06:	98 a9       	ldd	r25, Y+48	; 0x30
    1b08:	00 97       	sbiw	r24, 0x00	; 0
    1b0a:	69 f7       	brne	.-38     	; 0x1ae6 <LCD_displayCharacter+0xbe>
    1b0c:	14 c0       	rjmp	.+40     	; 0x1b36 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b0e:	69 a9       	ldd	r22, Y+49	; 0x31
    1b10:	7a a9       	ldd	r23, Y+50	; 0x32
    1b12:	8b a9       	ldd	r24, Y+51	; 0x33
    1b14:	9c a9       	ldd	r25, Y+52	; 0x34
    1b16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	98 ab       	std	Y+48, r25	; 0x30
    1b20:	8f a7       	std	Y+47, r24	; 0x2f
    1b22:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b24:	98 a9       	ldd	r25, Y+48	; 0x30
    1b26:	9c a7       	std	Y+44, r25	; 0x2c
    1b28:	8b a7       	std	Y+43, r24	; 0x2b
    1b2a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b2c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	f1 f7       	brne	.-4      	; 0x1b2e <LCD_displayCharacter+0x106>
    1b32:	9c a7       	std	Y+44, r25	; 0x2c
    1b34:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	62 e0       	ldi	r22, 0x02	; 2
    1b3a:	41 e0       	ldi	r20, 0x01	; 1
    1b3c:	0e 94 b2 07 	call	0xf64	; 0xf64 <GPIO_writePin>
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	a0 e8       	ldi	r26, 0x80	; 128
    1b46:	bf e3       	ldi	r27, 0x3F	; 63
    1b48:	8f a3       	std	Y+39, r24	; 0x27
    1b4a:	98 a7       	std	Y+40, r25	; 0x28
    1b4c:	a9 a7       	std	Y+41, r26	; 0x29
    1b4e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b50:	6f a1       	ldd	r22, Y+39	; 0x27
    1b52:	78 a5       	ldd	r23, Y+40	; 0x28
    1b54:	89 a5       	ldd	r24, Y+41	; 0x29
    1b56:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	4a e7       	ldi	r20, 0x7A	; 122
    1b5e:	53 e4       	ldi	r21, 0x43	; 67
    1b60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	8b a3       	std	Y+35, r24	; 0x23
    1b6a:	9c a3       	std	Y+36, r25	; 0x24
    1b6c:	ad a3       	std	Y+37, r26	; 0x25
    1b6e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b70:	6b a1       	ldd	r22, Y+35	; 0x23
    1b72:	7c a1       	ldd	r23, Y+36	; 0x24
    1b74:	8d a1       	ldd	r24, Y+37	; 0x25
    1b76:	9e a1       	ldd	r25, Y+38	; 0x26
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	40 e8       	ldi	r20, 0x80	; 128
    1b7e:	5f e3       	ldi	r21, 0x3F	; 63
    1b80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b84:	88 23       	and	r24, r24
    1b86:	2c f4       	brge	.+10     	; 0x1b92 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	9a a3       	std	Y+34, r25	; 0x22
    1b8e:	89 a3       	std	Y+33, r24	; 0x21
    1b90:	3f c0       	rjmp	.+126    	; 0x1c10 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1b92:	6b a1       	ldd	r22, Y+35	; 0x23
    1b94:	7c a1       	ldd	r23, Y+36	; 0x24
    1b96:	8d a1       	ldd	r24, Y+37	; 0x25
    1b98:	9e a1       	ldd	r25, Y+38	; 0x26
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	3f ef       	ldi	r19, 0xFF	; 255
    1b9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ba0:	57 e4       	ldi	r21, 0x47	; 71
    1ba2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ba6:	18 16       	cp	r1, r24
    1ba8:	4c f5       	brge	.+82     	; 0x1bfc <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1baa:	6f a1       	ldd	r22, Y+39	; 0x27
    1bac:	78 a5       	ldd	r23, Y+40	; 0x28
    1bae:	89 a5       	ldd	r24, Y+41	; 0x29
    1bb0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	40 e2       	ldi	r20, 0x20	; 32
    1bb8:	51 e4       	ldi	r21, 0x41	; 65
    1bba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	bc 01       	movw	r22, r24
    1bc4:	cd 01       	movw	r24, r26
    1bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	9a a3       	std	Y+34, r25	; 0x22
    1bd0:	89 a3       	std	Y+33, r24	; 0x21
    1bd2:	0f c0       	rjmp	.+30     	; 0x1bf2 <LCD_displayCharacter+0x1ca>
    1bd4:	89 e1       	ldi	r24, 0x19	; 25
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	98 a3       	std	Y+32, r25	; 0x20
    1bda:	8f 8f       	std	Y+31, r24	; 0x1f
    1bdc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bde:	98 a1       	ldd	r25, Y+32	; 0x20
    1be0:	01 97       	sbiw	r24, 0x01	; 1
    1be2:	f1 f7       	brne	.-4      	; 0x1be0 <LCD_displayCharacter+0x1b8>
    1be4:	98 a3       	std	Y+32, r25	; 0x20
    1be6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be8:	89 a1       	ldd	r24, Y+33	; 0x21
    1bea:	9a a1       	ldd	r25, Y+34	; 0x22
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	9a a3       	std	Y+34, r25	; 0x22
    1bf0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf2:	89 a1       	ldd	r24, Y+33	; 0x21
    1bf4:	9a a1       	ldd	r25, Y+34	; 0x22
    1bf6:	00 97       	sbiw	r24, 0x00	; 0
    1bf8:	69 f7       	brne	.-38     	; 0x1bd4 <LCD_displayCharacter+0x1ac>
    1bfa:	14 c0       	rjmp	.+40     	; 0x1c24 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfc:	6b a1       	ldd	r22, Y+35	; 0x23
    1bfe:	7c a1       	ldd	r23, Y+36	; 0x24
    1c00:	8d a1       	ldd	r24, Y+37	; 0x25
    1c02:	9e a1       	ldd	r25, Y+38	; 0x26
    1c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	9a a3       	std	Y+34, r25	; 0x22
    1c0e:	89 a3       	std	Y+33, r24	; 0x21
    1c10:	89 a1       	ldd	r24, Y+33	; 0x21
    1c12:	9a a1       	ldd	r25, Y+34	; 0x22
    1c14:	9e 8f       	std	Y+30, r25	; 0x1e
    1c16:	8d 8f       	std	Y+29, r24	; 0x1d
    1c18:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c1a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
    1c1e:	f1 f7       	brne	.-4      	; 0x1c1c <LCD_displayCharacter+0x1f4>
    1c20:	9e 8f       	std	Y+30, r25	; 0x1e
    1c22:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	69 ad       	ldd	r22, Y+57	; 0x39
    1c28:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <GPIO_writePort>
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	a0 e8       	ldi	r26, 0x80	; 128
    1c32:	bf e3       	ldi	r27, 0x3F	; 63
    1c34:	89 8f       	std	Y+25, r24	; 0x19
    1c36:	9a 8f       	std	Y+26, r25	; 0x1a
    1c38:	ab 8f       	std	Y+27, r26	; 0x1b
    1c3a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c3c:	69 8d       	ldd	r22, Y+25	; 0x19
    1c3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	4a e7       	ldi	r20, 0x7A	; 122
    1c4a:	53 e4       	ldi	r21, 0x43	; 67
    1c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	8d 8b       	std	Y+21, r24	; 0x15
    1c56:	9e 8b       	std	Y+22, r25	; 0x16
    1c58:	af 8b       	std	Y+23, r26	; 0x17
    1c5a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c60:	8f 89       	ldd	r24, Y+23	; 0x17
    1c62:	98 8d       	ldd	r25, Y+24	; 0x18
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	40 e8       	ldi	r20, 0x80	; 128
    1c6a:	5f e3       	ldi	r21, 0x3F	; 63
    1c6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c70:	88 23       	and	r24, r24
    1c72:	2c f4       	brge	.+10     	; 0x1c7e <LCD_displayCharacter+0x256>
		__ticks = 1;
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	9c 8b       	std	Y+20, r25	; 0x14
    1c7a:	8b 8b       	std	Y+19, r24	; 0x13
    1c7c:	3f c0       	rjmp	.+126    	; 0x1cfc <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    1c7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c80:	7e 89       	ldd	r23, Y+22	; 0x16
    1c82:	8f 89       	ldd	r24, Y+23	; 0x17
    1c84:	98 8d       	ldd	r25, Y+24	; 0x18
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	3f ef       	ldi	r19, 0xFF	; 255
    1c8a:	4f e7       	ldi	r20, 0x7F	; 127
    1c8c:	57 e4       	ldi	r21, 0x47	; 71
    1c8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c92:	18 16       	cp	r1, r24
    1c94:	4c f5       	brge	.+82     	; 0x1ce8 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c96:	69 8d       	ldd	r22, Y+25	; 0x19
    1c98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	40 e2       	ldi	r20, 0x20	; 32
    1ca4:	51 e4       	ldi	r21, 0x41	; 65
    1ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	bc 01       	movw	r22, r24
    1cb0:	cd 01       	movw	r24, r26
    1cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	9c 8b       	std	Y+20, r25	; 0x14
    1cbc:	8b 8b       	std	Y+19, r24	; 0x13
    1cbe:	0f c0       	rjmp	.+30     	; 0x1cde <LCD_displayCharacter+0x2b6>
    1cc0:	89 e1       	ldi	r24, 0x19	; 25
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	9a 8b       	std	Y+18, r25	; 0x12
    1cc6:	89 8b       	std	Y+17, r24	; 0x11
    1cc8:	89 89       	ldd	r24, Y+17	; 0x11
    1cca:	9a 89       	ldd	r25, Y+18	; 0x12
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	f1 f7       	brne	.-4      	; 0x1ccc <LCD_displayCharacter+0x2a4>
    1cd0:	9a 8b       	std	Y+18, r25	; 0x12
    1cd2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd4:	8b 89       	ldd	r24, Y+19	; 0x13
    1cd6:	9c 89       	ldd	r25, Y+20	; 0x14
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	9c 8b       	std	Y+20, r25	; 0x14
    1cdc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cde:	8b 89       	ldd	r24, Y+19	; 0x13
    1ce0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ce2:	00 97       	sbiw	r24, 0x00	; 0
    1ce4:	69 f7       	brne	.-38     	; 0x1cc0 <LCD_displayCharacter+0x298>
    1ce6:	14 c0       	rjmp	.+40     	; 0x1d10 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce8:	6d 89       	ldd	r22, Y+21	; 0x15
    1cea:	7e 89       	ldd	r23, Y+22	; 0x16
    1cec:	8f 89       	ldd	r24, Y+23	; 0x17
    1cee:	98 8d       	ldd	r25, Y+24	; 0x18
    1cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	9c 8b       	std	Y+20, r25	; 0x14
    1cfa:	8b 8b       	std	Y+19, r24	; 0x13
    1cfc:	8b 89       	ldd	r24, Y+19	; 0x13
    1cfe:	9c 89       	ldd	r25, Y+20	; 0x14
    1d00:	98 8b       	std	Y+16, r25	; 0x10
    1d02:	8f 87       	std	Y+15, r24	; 0x0f
    1d04:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d06:	98 89       	ldd	r25, Y+16	; 0x10
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	f1 f7       	brne	.-4      	; 0x1d08 <LCD_displayCharacter+0x2e0>
    1d0c:	98 8b       	std	Y+16, r25	; 0x10
    1d0e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	62 e0       	ldi	r22, 0x02	; 2
    1d14:	40 e0       	ldi	r20, 0x00	; 0
    1d16:	0e 94 b2 07 	call	0xf64	; 0xf64 <GPIO_writePin>
    1d1a:	80 e0       	ldi	r24, 0x00	; 0
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	a0 e8       	ldi	r26, 0x80	; 128
    1d20:	bf e3       	ldi	r27, 0x3F	; 63
    1d22:	8b 87       	std	Y+11, r24	; 0x0b
    1d24:	9c 87       	std	Y+12, r25	; 0x0c
    1d26:	ad 87       	std	Y+13, r26	; 0x0d
    1d28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	4a e7       	ldi	r20, 0x7A	; 122
    1d38:	53 e4       	ldi	r21, 0x43	; 67
    1d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	8f 83       	std	Y+7, r24	; 0x07
    1d44:	98 87       	std	Y+8, r25	; 0x08
    1d46:	a9 87       	std	Y+9, r26	; 0x09
    1d48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d4c:	78 85       	ldd	r23, Y+8	; 0x08
    1d4e:	89 85       	ldd	r24, Y+9	; 0x09
    1d50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	40 e8       	ldi	r20, 0x80	; 128
    1d58:	5f e3       	ldi	r21, 0x3F	; 63
    1d5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d5e:	88 23       	and	r24, r24
    1d60:	2c f4       	brge	.+10     	; 0x1d6c <LCD_displayCharacter+0x344>
		__ticks = 1;
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	9e 83       	std	Y+6, r25	; 0x06
    1d68:	8d 83       	std	Y+5, r24	; 0x05
    1d6a:	3f c0       	rjmp	.+126    	; 0x1dea <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    1d6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d6e:	78 85       	ldd	r23, Y+8	; 0x08
    1d70:	89 85       	ldd	r24, Y+9	; 0x09
    1d72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	3f ef       	ldi	r19, 0xFF	; 255
    1d78:	4f e7       	ldi	r20, 0x7F	; 127
    1d7a:	57 e4       	ldi	r21, 0x47	; 71
    1d7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d80:	18 16       	cp	r1, r24
    1d82:	4c f5       	brge	.+82     	; 0x1dd6 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	40 e2       	ldi	r20, 0x20	; 32
    1d92:	51 e4       	ldi	r21, 0x41	; 65
    1d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	bc 01       	movw	r22, r24
    1d9e:	cd 01       	movw	r24, r26
    1da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	9e 83       	std	Y+6, r25	; 0x06
    1daa:	8d 83       	std	Y+5, r24	; 0x05
    1dac:	0f c0       	rjmp	.+30     	; 0x1dcc <LCD_displayCharacter+0x3a4>
    1dae:	89 e1       	ldi	r24, 0x19	; 25
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	9c 83       	std	Y+4, r25	; 0x04
    1db4:	8b 83       	std	Y+3, r24	; 0x03
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	f1 f7       	brne	.-4      	; 0x1dba <LCD_displayCharacter+0x392>
    1dbe:	9c 83       	std	Y+4, r25	; 0x04
    1dc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc6:	01 97       	sbiw	r24, 0x01	; 1
    1dc8:	9e 83       	std	Y+6, r25	; 0x06
    1dca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dce:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd0:	00 97       	sbiw	r24, 0x00	; 0
    1dd2:	69 f7       	brne	.-38     	; 0x1dae <LCD_displayCharacter+0x386>
    1dd4:	14 c0       	rjmp	.+40     	; 0x1dfe <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd8:	78 85       	ldd	r23, Y+8	; 0x08
    1dda:	89 85       	ldd	r24, Y+9	; 0x09
    1ddc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	9e 83       	std	Y+6, r25	; 0x06
    1de8:	8d 83       	std	Y+5, r24	; 0x05
    1dea:	8d 81       	ldd	r24, Y+5	; 0x05
    1dec:	9e 81       	ldd	r25, Y+6	; 0x06
    1dee:	9a 83       	std	Y+2, r25	; 0x02
    1df0:	89 83       	std	Y+1, r24	; 0x01
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	9a 81       	ldd	r25, Y+2	; 0x02
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	f1 f7       	brne	.-4      	; 0x1df6 <LCD_displayCharacter+0x3ce>
    1dfa:	9a 83       	std	Y+2, r25	; 0x02
    1dfc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1dfe:	e9 96       	adiw	r28, 0x39	; 57
    1e00:	0f b6       	in	r0, 0x3f	; 63
    1e02:	f8 94       	cli
    1e04:	de bf       	out	0x3e, r29	; 62
    1e06:	0f be       	out	0x3f, r0	; 63
    1e08:	cd bf       	out	0x3d, r28	; 61
    1e0a:	cf 91       	pop	r28
    1e0c:	df 91       	pop	r29
    1e0e:	08 95       	ret

00001e10 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1e10:	df 93       	push	r29
    1e12:	cf 93       	push	r28
    1e14:	00 d0       	rcall	.+0      	; 0x1e16 <LCD_displayString+0x6>
    1e16:	0f 92       	push	r0
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	9b 83       	std	Y+3, r25	; 0x03
    1e1e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1e20:	19 82       	std	Y+1, r1	; 0x01
    1e22:	0e c0       	rjmp	.+28     	; 0x1e40 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	28 2f       	mov	r18, r24
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e2e:	fc 01       	movw	r30, r24
    1e30:	e2 0f       	add	r30, r18
    1e32:	f3 1f       	adc	r31, r19
    1e34:	80 81       	ld	r24, Z
    1e36:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <LCD_displayCharacter>
		i++;
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	8f 5f       	subi	r24, 0xFF	; 255
    1e3e:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	28 2f       	mov	r18, r24
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	9b 81       	ldd	r25, Y+3	; 0x03
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	e2 0f       	add	r30, r18
    1e4e:	f3 1f       	adc	r31, r19
    1e50:	80 81       	ld	r24, Z
    1e52:	88 23       	and	r24, r24
    1e54:	39 f7       	brne	.-50     	; 0x1e24 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	cf 91       	pop	r28
    1e5e:	df 91       	pop	r29
    1e60:	08 95       	ret

00001e62 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	00 d0       	rcall	.+0      	; 0x1e68 <LCD_moveCursor+0x6>
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <LCD_moveCursor+0x8>
    1e6a:	0f 92       	push	r0
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	8a 83       	std	Y+2, r24	; 0x02
    1e72:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	28 2f       	mov	r18, r24
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	3d 83       	std	Y+5, r19	; 0x05
    1e7c:	2c 83       	std	Y+4, r18	; 0x04
    1e7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e80:	9d 81       	ldd	r25, Y+5	; 0x05
    1e82:	81 30       	cpi	r24, 0x01	; 1
    1e84:	91 05       	cpc	r25, r1
    1e86:	c1 f0       	breq	.+48     	; 0x1eb8 <LCD_moveCursor+0x56>
    1e88:	2c 81       	ldd	r18, Y+4	; 0x04
    1e8a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e8c:	22 30       	cpi	r18, 0x02	; 2
    1e8e:	31 05       	cpc	r19, r1
    1e90:	2c f4       	brge	.+10     	; 0x1e9c <LCD_moveCursor+0x3a>
    1e92:	8c 81       	ldd	r24, Y+4	; 0x04
    1e94:	9d 81       	ldd	r25, Y+5	; 0x05
    1e96:	00 97       	sbiw	r24, 0x00	; 0
    1e98:	61 f0       	breq	.+24     	; 0x1eb2 <LCD_moveCursor+0x50>
    1e9a:	19 c0       	rjmp	.+50     	; 0x1ece <LCD_moveCursor+0x6c>
    1e9c:	2c 81       	ldd	r18, Y+4	; 0x04
    1e9e:	3d 81       	ldd	r19, Y+5	; 0x05
    1ea0:	22 30       	cpi	r18, 0x02	; 2
    1ea2:	31 05       	cpc	r19, r1
    1ea4:	69 f0       	breq	.+26     	; 0x1ec0 <LCD_moveCursor+0x5e>
    1ea6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea8:	9d 81       	ldd	r25, Y+5	; 0x05
    1eaa:	83 30       	cpi	r24, 0x03	; 3
    1eac:	91 05       	cpc	r25, r1
    1eae:	61 f0       	breq	.+24     	; 0x1ec8 <LCD_moveCursor+0x66>
    1eb0:	0e c0       	rjmp	.+28     	; 0x1ece <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb4:	89 83       	std	Y+1, r24	; 0x01
    1eb6:	0b c0       	rjmp	.+22     	; 0x1ece <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	80 5c       	subi	r24, 0xC0	; 192
    1ebc:	89 83       	std	Y+1, r24	; 0x01
    1ebe:	07 c0       	rjmp	.+14     	; 0x1ece <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec2:	80 5f       	subi	r24, 0xF0	; 240
    1ec4:	89 83       	std	Y+1, r24	; 0x01
    1ec6:	03 c0       	rjmp	.+6      	; 0x1ece <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eca:	80 5b       	subi	r24, 0xB0	; 176
    1ecc:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
    1ed0:	80 68       	ori	r24, 0x80	; 128
    1ed2:	0e 94 20 0b 	call	0x1640	; 0x1640 <LCD_sendCommand>
}
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	cf 91       	pop	r28
    1ee2:	df 91       	pop	r29
    1ee4:	08 95       	ret

00001ee6 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1ee6:	df 93       	push	r29
    1ee8:	cf 93       	push	r28
    1eea:	00 d0       	rcall	.+0      	; 0x1eec <LCD_displayStringRowColumn+0x6>
    1eec:	00 d0       	rcall	.+0      	; 0x1eee <LCD_displayStringRowColumn+0x8>
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
    1ef2:	89 83       	std	Y+1, r24	; 0x01
    1ef4:	6a 83       	std	Y+2, r22	; 0x02
    1ef6:	5c 83       	std	Y+4, r21	; 0x04
    1ef8:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1efa:	89 81       	ldd	r24, Y+1	; 0x01
    1efc:	6a 81       	ldd	r22, Y+2	; 0x02
    1efe:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	9c 81       	ldd	r25, Y+4	; 0x04
    1f06:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <LCD_displayString>
}
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	0f 90       	pop	r0
    1f10:	0f 90       	pop	r0
    1f12:	cf 91       	pop	r28
    1f14:	df 91       	pop	r29
    1f16:	08 95       	ret

00001f18 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1f18:	df 93       	push	r29
    1f1a:	cf 93       	push	r28
    1f1c:	cd b7       	in	r28, 0x3d	; 61
    1f1e:	de b7       	in	r29, 0x3e	; 62
    1f20:	62 97       	sbiw	r28, 0x12	; 18
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	f8 94       	cli
    1f26:	de bf       	out	0x3e, r29	; 62
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	cd bf       	out	0x3d, r28	; 61
    1f2c:	9a 8b       	std	Y+18, r25	; 0x12
    1f2e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1f30:	89 89       	ldd	r24, Y+17	; 0x11
    1f32:	9a 89       	ldd	r25, Y+18	; 0x12
    1f34:	9e 01       	movw	r18, r28
    1f36:	2f 5f       	subi	r18, 0xFF	; 255
    1f38:	3f 4f       	sbci	r19, 0xFF	; 255
    1f3a:	b9 01       	movw	r22, r18
    1f3c:	4a e0       	ldi	r20, 0x0A	; 10
    1f3e:	50 e0       	ldi	r21, 0x00	; 0
    1f40:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <itoa>
   LCD_displayString(buff); /* Display the string */
    1f44:	ce 01       	movw	r24, r28
    1f46:	01 96       	adiw	r24, 0x01	; 1
    1f48:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <LCD_displayString>
}
    1f4c:	62 96       	adiw	r28, 0x12	; 18
    1f4e:	0f b6       	in	r0, 0x3f	; 63
    1f50:	f8 94       	cli
    1f52:	de bf       	out	0x3e, r29	; 62
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	cd bf       	out	0x3d, r28	; 61
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	0e 94 20 0b 	call	0x1640	; 0x1640 <LCD_sendCommand>
}
    1f6c:	cf 91       	pop	r28
    1f6e:	df 91       	pop	r29
    1f70:	08 95       	ret

00001f72 <main>:
 **************************************************************************************************/

#include "Simple_Calculator.h"

int main(void)
{
    1f72:	df 93       	push	r29
    1f74:	cf 93       	push	r28
    1f76:	cd b7       	in	r28, 0x3d	; 61
    1f78:	de b7       	in	r29, 0x3e	; 62
    1f7a:	67 97       	sbiw	r28, 0x17	; 23
    1f7c:	0f b6       	in	r0, 0x3f	; 63
    1f7e:	f8 94       	cli
    1f80:	de bf       	out	0x3e, r29	; 62
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	cd bf       	out	0x3d, r28	; 61
	/*
	 * Initialization of LCD_Calculator
	 */
	LCD_Claculator_init();
    1f86:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_Claculator_init>
	 * key : returned number or operation from Keypad
	 * operator : calculation operator
	 * key_flag : flag to prevent displaying characters after calculated unless user clear screen
	 * result : result of number calculation
	 */
	uint8 key, operator, key_flag = 0;
    1f8a:	1b 8a       	std	Y+19, r1	; 0x13
	sint32 result;

	for(;;)
	{
		key = KEYPAD_getPressedKey();
    1f8c:	0e 94 05 0a 	call	0x140a	; 0x140a <KEYPAD_getPressedKey>
    1f90:	8d 8b       	std	Y+21, r24	; 0x15
		switch(key)
    1f92:	8d 89       	ldd	r24, Y+21	; 0x15
    1f94:	28 2f       	mov	r18, r24
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	3f 8b       	std	Y+23, r19	; 0x17
    1f9a:	2e 8b       	std	Y+22, r18	; 0x16
    1f9c:	8e 89       	ldd	r24, Y+22	; 0x16
    1f9e:	9f 89       	ldd	r25, Y+23	; 0x17
    1fa0:	87 30       	cpi	r24, 0x07	; 7
    1fa2:	91 05       	cpc	r25, r1
    1fa4:	09 f4       	brne	.+2      	; 0x1fa8 <main+0x36>
    1fa6:	c0 c0       	rjmp	.+384    	; 0x2128 <main+0x1b6>
    1fa8:	2e 89       	ldd	r18, Y+22	; 0x16
    1faa:	3f 89       	ldd	r19, Y+23	; 0x17
    1fac:	28 30       	cpi	r18, 0x08	; 8
    1fae:	31 05       	cpc	r19, r1
    1fb0:	54 f5       	brge	.+84     	; 0x2006 <main+0x94>
    1fb2:	8e 89       	ldd	r24, Y+22	; 0x16
    1fb4:	9f 89       	ldd	r25, Y+23	; 0x17
    1fb6:	83 30       	cpi	r24, 0x03	; 3
    1fb8:	91 05       	cpc	r25, r1
    1fba:	09 f4       	brne	.+2      	; 0x1fbe <main+0x4c>
    1fbc:	85 c0       	rjmp	.+266    	; 0x20c8 <main+0x156>
    1fbe:	2e 89       	ldd	r18, Y+22	; 0x16
    1fc0:	3f 89       	ldd	r19, Y+23	; 0x17
    1fc2:	24 30       	cpi	r18, 0x04	; 4
    1fc4:	31 05       	cpc	r19, r1
    1fc6:	94 f4       	brge	.+36     	; 0x1fec <main+0x7a>
    1fc8:	8e 89       	ldd	r24, Y+22	; 0x16
    1fca:	9f 89       	ldd	r25, Y+23	; 0x17
    1fcc:	81 30       	cpi	r24, 0x01	; 1
    1fce:	91 05       	cpc	r25, r1
    1fd0:	09 f4       	brne	.+2      	; 0x1fd4 <main+0x62>
    1fd2:	62 c0       	rjmp	.+196    	; 0x2098 <main+0x126>
    1fd4:	2e 89       	ldd	r18, Y+22	; 0x16
    1fd6:	3f 89       	ldd	r19, Y+23	; 0x17
    1fd8:	22 30       	cpi	r18, 0x02	; 2
    1fda:	31 05       	cpc	r19, r1
    1fdc:	0c f0       	brlt	.+2      	; 0x1fe0 <main+0x6e>
    1fde:	68 c0       	rjmp	.+208    	; 0x20b0 <main+0x13e>
    1fe0:	8e 89       	ldd	r24, Y+22	; 0x16
    1fe2:	9f 89       	ldd	r25, Y+23	; 0x17
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	09 f4       	brne	.+2      	; 0x1fea <main+0x78>
    1fe8:	4b c0       	rjmp	.+150    	; 0x2080 <main+0x10e>
    1fea:	40 c1       	rjmp	.+640    	; 0x226c <main+0x2fa>
    1fec:	2e 89       	ldd	r18, Y+22	; 0x16
    1fee:	3f 89       	ldd	r19, Y+23	; 0x17
    1ff0:	25 30       	cpi	r18, 0x05	; 5
    1ff2:	31 05       	cpc	r19, r1
    1ff4:	09 f4       	brne	.+2      	; 0x1ff8 <main+0x86>
    1ff6:	80 c0       	rjmp	.+256    	; 0x20f8 <main+0x186>
    1ff8:	8e 89       	ldd	r24, Y+22	; 0x16
    1ffa:	9f 89       	ldd	r25, Y+23	; 0x17
    1ffc:	86 30       	cpi	r24, 0x06	; 6
    1ffe:	91 05       	cpc	r25, r1
    2000:	0c f0       	brlt	.+2      	; 0x2004 <main+0x92>
    2002:	86 c0       	rjmp	.+268    	; 0x2110 <main+0x19e>
    2004:	6d c0       	rjmp	.+218    	; 0x20e0 <main+0x16e>
    2006:	2e 89       	ldd	r18, Y+22	; 0x16
    2008:	3f 89       	ldd	r19, Y+23	; 0x17
    200a:	2a 32       	cpi	r18, 0x2A	; 42
    200c:	31 05       	cpc	r19, r1
    200e:	09 f4       	brne	.+2      	; 0x2012 <main+0xa0>
    2010:	cf c0       	rjmp	.+414    	; 0x21b0 <main+0x23e>
    2012:	8e 89       	ldd	r24, Y+22	; 0x16
    2014:	9f 89       	ldd	r25, Y+23	; 0x17
    2016:	8b 32       	cpi	r24, 0x2B	; 43
    2018:	91 05       	cpc	r25, r1
    201a:	9c f4       	brge	.+38     	; 0x2042 <main+0xd0>
    201c:	2e 89       	ldd	r18, Y+22	; 0x16
    201e:	3f 89       	ldd	r19, Y+23	; 0x17
    2020:	29 30       	cpi	r18, 0x09	; 9
    2022:	31 05       	cpc	r19, r1
    2024:	09 f4       	brne	.+2      	; 0x2028 <main+0xb6>
    2026:	98 c0       	rjmp	.+304    	; 0x2158 <main+0x1e6>
    2028:	8e 89       	ldd	r24, Y+22	; 0x16
    202a:	9f 89       	ldd	r25, Y+23	; 0x17
    202c:	89 30       	cpi	r24, 0x09	; 9
    202e:	91 05       	cpc	r25, r1
    2030:	0c f4       	brge	.+2      	; 0x2034 <main+0xc2>
    2032:	86 c0       	rjmp	.+268    	; 0x2140 <main+0x1ce>
    2034:	2e 89       	ldd	r18, Y+22	; 0x16
    2036:	3f 89       	ldd	r19, Y+23	; 0x17
    2038:	2d 30       	cpi	r18, 0x0D	; 13
    203a:	31 05       	cpc	r19, r1
    203c:	09 f4       	brne	.+2      	; 0x2040 <main+0xce>
    203e:	98 c0       	rjmp	.+304    	; 0x2170 <main+0x1fe>
    2040:	15 c1       	rjmp	.+554    	; 0x226c <main+0x2fa>
    2042:	8e 89       	ldd	r24, Y+22	; 0x16
    2044:	9f 89       	ldd	r25, Y+23	; 0x17
    2046:	8d 32       	cpi	r24, 0x2D	; 45
    2048:	91 05       	cpc	r25, r1
    204a:	09 f4       	brne	.+2      	; 0x204e <main+0xdc>
    204c:	dd c0       	rjmp	.+442    	; 0x2208 <main+0x296>
    204e:	2e 89       	ldd	r18, Y+22	; 0x16
    2050:	3f 89       	ldd	r19, Y+23	; 0x17
    2052:	2e 32       	cpi	r18, 0x2E	; 46
    2054:	31 05       	cpc	r19, r1
    2056:	3c f4       	brge	.+14     	; 0x2066 <main+0xf4>
    2058:	8e 89       	ldd	r24, Y+22	; 0x16
    205a:	9f 89       	ldd	r25, Y+23	; 0x17
    205c:	8b 32       	cpi	r24, 0x2B	; 43
    205e:	91 05       	cpc	r25, r1
    2060:	09 f4       	brne	.+2      	; 0x2064 <main+0xf2>
    2062:	c4 c0       	rjmp	.+392    	; 0x21ec <main+0x27a>
    2064:	03 c1       	rjmp	.+518    	; 0x226c <main+0x2fa>
    2066:	2e 89       	ldd	r18, Y+22	; 0x16
    2068:	3f 89       	ldd	r19, Y+23	; 0x17
    206a:	2f 32       	cpi	r18, 0x2F	; 47
    206c:	31 05       	cpc	r19, r1
    206e:	09 f4       	brne	.+2      	; 0x2072 <main+0x100>
    2070:	ae c0       	rjmp	.+348    	; 0x21ce <main+0x25c>
    2072:	8e 89       	ldd	r24, Y+22	; 0x16
    2074:	9f 89       	ldd	r25, Y+23	; 0x17
    2076:	8d 33       	cpi	r24, 0x3D	; 61
    2078:	91 05       	cpc	r25, r1
    207a:	09 f4       	brne	.+2      	; 0x207e <main+0x10c>
    207c:	d3 c0       	rjmp	.+422    	; 0x2224 <main+0x2b2>
    207e:	f6 c0       	rjmp	.+492    	; 0x226c <main+0x2fa>
		{
		case 0:
			if(key_flag == 0)
    2080:	8b 89       	ldd	r24, Y+19	; 0x13
    2082:	88 23       	and	r24, r24
    2084:	09 f0       	breq	.+2      	; 0x2088 <main+0x116>
    2086:	f2 c0       	rjmp	.+484    	; 0x226c <main+0x2fa>
			{
				LCD_intgerToString(0);
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <LCD_intgerToString>
				Taking_numbers(0);
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	0e 94 8a 06 	call	0xd14	; 0xd14 <Taking_numbers>
    2096:	ea c0       	rjmp	.+468    	; 0x226c <main+0x2fa>
			}
			break;
		case 1:
			if(key_flag == 0)
    2098:	8b 89       	ldd	r24, Y+19	; 0x13
    209a:	88 23       	and	r24, r24
    209c:	09 f0       	breq	.+2      	; 0x20a0 <main+0x12e>
    209e:	e6 c0       	rjmp	.+460    	; 0x226c <main+0x2fa>
			{
				LCD_intgerToString(1);
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <LCD_intgerToString>
				Taking_numbers(1);
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	0e 94 8a 06 	call	0xd14	; 0xd14 <Taking_numbers>
    20ae:	de c0       	rjmp	.+444    	; 0x226c <main+0x2fa>
			}
			break;
		case 2:
			if(key_flag == 0)
    20b0:	8b 89       	ldd	r24, Y+19	; 0x13
    20b2:	88 23       	and	r24, r24
    20b4:	09 f0       	breq	.+2      	; 0x20b8 <main+0x146>
    20b6:	da c0       	rjmp	.+436    	; 0x226c <main+0x2fa>
			{
				LCD_intgerToString(2);
    20b8:	82 e0       	ldi	r24, 0x02	; 2
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <LCD_intgerToString>
				Taking_numbers(2);
    20c0:	82 e0       	ldi	r24, 0x02	; 2
    20c2:	0e 94 8a 06 	call	0xd14	; 0xd14 <Taking_numbers>
    20c6:	d2 c0       	rjmp	.+420    	; 0x226c <main+0x2fa>
			}
			break;
		case 3:
			if(key_flag == 0)
    20c8:	8b 89       	ldd	r24, Y+19	; 0x13
    20ca:	88 23       	and	r24, r24
    20cc:	09 f0       	breq	.+2      	; 0x20d0 <main+0x15e>
    20ce:	ce c0       	rjmp	.+412    	; 0x226c <main+0x2fa>
			{
				LCD_intgerToString(3);
    20d0:	83 e0       	ldi	r24, 0x03	; 3
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <LCD_intgerToString>
				Taking_numbers(3);
    20d8:	83 e0       	ldi	r24, 0x03	; 3
    20da:	0e 94 8a 06 	call	0xd14	; 0xd14 <Taking_numbers>
    20de:	c6 c0       	rjmp	.+396    	; 0x226c <main+0x2fa>
			}
			break;
		case 4:
			if(key_flag == 0)
    20e0:	8b 89       	ldd	r24, Y+19	; 0x13
    20e2:	88 23       	and	r24, r24
    20e4:	09 f0       	breq	.+2      	; 0x20e8 <main+0x176>
    20e6:	c2 c0       	rjmp	.+388    	; 0x226c <main+0x2fa>
			{
				LCD_intgerToString(4);
    20e8:	84 e0       	ldi	r24, 0x04	; 4
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <LCD_intgerToString>
				Taking_numbers(4);
    20f0:	84 e0       	ldi	r24, 0x04	; 4
    20f2:	0e 94 8a 06 	call	0xd14	; 0xd14 <Taking_numbers>
    20f6:	ba c0       	rjmp	.+372    	; 0x226c <main+0x2fa>
			}
			break;
		case 5:
			if(key_flag == 0)
    20f8:	8b 89       	ldd	r24, Y+19	; 0x13
    20fa:	88 23       	and	r24, r24
    20fc:	09 f0       	breq	.+2      	; 0x2100 <main+0x18e>
    20fe:	b6 c0       	rjmp	.+364    	; 0x226c <main+0x2fa>
			{
				LCD_intgerToString(5);
    2100:	85 e0       	ldi	r24, 0x05	; 5
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <LCD_intgerToString>
				Taking_numbers(5);
    2108:	85 e0       	ldi	r24, 0x05	; 5
    210a:	0e 94 8a 06 	call	0xd14	; 0xd14 <Taking_numbers>
    210e:	ae c0       	rjmp	.+348    	; 0x226c <main+0x2fa>
			}
			break;
		case 6:
			if(key_flag == 0)
    2110:	8b 89       	ldd	r24, Y+19	; 0x13
    2112:	88 23       	and	r24, r24
    2114:	09 f0       	breq	.+2      	; 0x2118 <main+0x1a6>
    2116:	aa c0       	rjmp	.+340    	; 0x226c <main+0x2fa>
			{
				LCD_intgerToString(6);
    2118:	86 e0       	ldi	r24, 0x06	; 6
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <LCD_intgerToString>
				Taking_numbers(6);
    2120:	86 e0       	ldi	r24, 0x06	; 6
    2122:	0e 94 8a 06 	call	0xd14	; 0xd14 <Taking_numbers>
    2126:	a2 c0       	rjmp	.+324    	; 0x226c <main+0x2fa>
			}
			break;
		case 7:
			if(key_flag == 0)
    2128:	8b 89       	ldd	r24, Y+19	; 0x13
    212a:	88 23       	and	r24, r24
    212c:	09 f0       	breq	.+2      	; 0x2130 <main+0x1be>
    212e:	9e c0       	rjmp	.+316    	; 0x226c <main+0x2fa>
			{
				LCD_intgerToString(7);
    2130:	87 e0       	ldi	r24, 0x07	; 7
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <LCD_intgerToString>
				Taking_numbers(7);
    2138:	87 e0       	ldi	r24, 0x07	; 7
    213a:	0e 94 8a 06 	call	0xd14	; 0xd14 <Taking_numbers>
    213e:	96 c0       	rjmp	.+300    	; 0x226c <main+0x2fa>
			}
			break;
		case 8:
			if(key_flag == 0)
    2140:	8b 89       	ldd	r24, Y+19	; 0x13
    2142:	88 23       	and	r24, r24
    2144:	09 f0       	breq	.+2      	; 0x2148 <main+0x1d6>
    2146:	92 c0       	rjmp	.+292    	; 0x226c <main+0x2fa>
			{
				LCD_intgerToString(8);
    2148:	88 e0       	ldi	r24, 0x08	; 8
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <LCD_intgerToString>
				Taking_numbers(8);
    2150:	88 e0       	ldi	r24, 0x08	; 8
    2152:	0e 94 8a 06 	call	0xd14	; 0xd14 <Taking_numbers>
    2156:	8a c0       	rjmp	.+276    	; 0x226c <main+0x2fa>
			}
			break;
		case 9:
			if(key_flag == 0)
    2158:	8b 89       	ldd	r24, Y+19	; 0x13
    215a:	88 23       	and	r24, r24
    215c:	09 f0       	breq	.+2      	; 0x2160 <main+0x1ee>
    215e:	86 c0       	rjmp	.+268    	; 0x226c <main+0x2fa>
			{
				LCD_intgerToString(9);
    2160:	89 e0       	ldi	r24, 0x09	; 9
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <LCD_intgerToString>
				Taking_numbers(9);
    2168:	89 e0       	ldi	r24, 0x09	; 9
    216a:	0e 94 8a 06 	call	0xd14	; 0xd14 <Taking_numbers>
    216e:	7e c0       	rjmp	.+252    	; 0x226c <main+0x2fa>
			}
			break;
		case 13:
			LCD_clearScreen();
    2170:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_clearScreen>
			LCD_displayStringRowColumn(0,5,"Simple");
    2174:	23 e8       	ldi	r18, 0x83	; 131
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	65 e0       	ldi	r22, 0x05	; 5
    217c:	a9 01       	movw	r20, r18
    217e:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,3,"Calculator");
    2182:	2a e8       	ldi	r18, 0x8A	; 138
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	63 e0       	ldi	r22, 0x03	; 3
    218a:	a9 01       	movw	r20, r18
    218c:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <LCD_displayStringRowColumn>
			LCD_moveCursor(2, 0);
    2190:	82 e0       	ldi	r24, 0x02	; 2
    2192:	60 e0       	ldi	r22, 0x00	; 0
    2194:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_moveCursor>
			num1 = 0;
    2198:	10 92 a2 00 	sts	0x00A2, r1
    219c:	10 92 a1 00 	sts	0x00A1, r1
			num2 = 0;
    21a0:	10 92 a0 00 	sts	0x00A0, r1
    21a4:	10 92 9f 00 	sts	0x009F, r1
			num2_flag = 0;
    21a8:	10 92 a3 00 	sts	0x00A3, r1
			key_flag = 0;
    21ac:	1b 8a       	std	Y+19, r1	; 0x13
    21ae:	5e c0       	rjmp	.+188    	; 0x226c <main+0x2fa>
			break;
		case '*':
			if(key_flag == 0)
    21b0:	8b 89       	ldd	r24, Y+19	; 0x13
    21b2:	88 23       	and	r24, r24
    21b4:	09 f0       	breq	.+2      	; 0x21b8 <main+0x246>
    21b6:	5a c0       	rjmp	.+180    	; 0x226c <main+0x2fa>
			{
				LCD_displayCharacter('*');
    21b8:	8a e2       	ldi	r24, 0x2A	; 42
    21ba:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <LCD_displayCharacter>
				operator = '*';
    21be:	8a e2       	ldi	r24, 0x2A	; 42
    21c0:	8c 8b       	std	Y+20, r24	; 0x14
				num2_flag++;
    21c2:	80 91 a3 00 	lds	r24, 0x00A3
    21c6:	8f 5f       	subi	r24, 0xFF	; 255
    21c8:	80 93 a3 00 	sts	0x00A3, r24
    21cc:	4f c0       	rjmp	.+158    	; 0x226c <main+0x2fa>
			}
			break;
		case '/':
			if(key_flag == 0)
    21ce:	8b 89       	ldd	r24, Y+19	; 0x13
    21d0:	88 23       	and	r24, r24
    21d2:	09 f0       	breq	.+2      	; 0x21d6 <main+0x264>
    21d4:	4b c0       	rjmp	.+150    	; 0x226c <main+0x2fa>
			{
				LCD_displayCharacter('/');
    21d6:	8f e2       	ldi	r24, 0x2F	; 47
    21d8:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <LCD_displayCharacter>
				operator = '/';
    21dc:	8f e2       	ldi	r24, 0x2F	; 47
    21de:	8c 8b       	std	Y+20, r24	; 0x14
				num2_flag++;
    21e0:	80 91 a3 00 	lds	r24, 0x00A3
    21e4:	8f 5f       	subi	r24, 0xFF	; 255
    21e6:	80 93 a3 00 	sts	0x00A3, r24
    21ea:	40 c0       	rjmp	.+128    	; 0x226c <main+0x2fa>
			}
			break;
		case '+':
			if(key_flag == 0)
    21ec:	8b 89       	ldd	r24, Y+19	; 0x13
    21ee:	88 23       	and	r24, r24
    21f0:	e9 f5       	brne	.+122    	; 0x226c <main+0x2fa>
			{
				LCD_displayCharacter('+');
    21f2:	8b e2       	ldi	r24, 0x2B	; 43
    21f4:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <LCD_displayCharacter>
				operator = '+';
    21f8:	8b e2       	ldi	r24, 0x2B	; 43
    21fa:	8c 8b       	std	Y+20, r24	; 0x14
				num2_flag++;
    21fc:	80 91 a3 00 	lds	r24, 0x00A3
    2200:	8f 5f       	subi	r24, 0xFF	; 255
    2202:	80 93 a3 00 	sts	0x00A3, r24
    2206:	32 c0       	rjmp	.+100    	; 0x226c <main+0x2fa>
			}
			break;
		case '-':
			if(key_flag == 0)
    2208:	8b 89       	ldd	r24, Y+19	; 0x13
    220a:	88 23       	and	r24, r24
    220c:	79 f5       	brne	.+94     	; 0x226c <main+0x2fa>
			{
				LCD_displayCharacter('-');
    220e:	8d e2       	ldi	r24, 0x2D	; 45
    2210:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <LCD_displayCharacter>
				operator = '-';
    2214:	8d e2       	ldi	r24, 0x2D	; 45
    2216:	8c 8b       	std	Y+20, r24	; 0x14
				num2_flag++;
    2218:	80 91 a3 00 	lds	r24, 0x00A3
    221c:	8f 5f       	subi	r24, 0xFF	; 255
    221e:	80 93 a3 00 	sts	0x00A3, r24
    2222:	24 c0       	rjmp	.+72     	; 0x226c <main+0x2fa>
			}
			break;
		case '=':
			if(key_flag == 0)
    2224:	8b 89       	ldd	r24, Y+19	; 0x13
    2226:	88 23       	and	r24, r24
    2228:	09 f5       	brne	.+66     	; 0x226c <main+0x2fa>
			{
				LCD_moveCursor(3, 0);
    222a:	83 e0       	ldi	r24, 0x03	; 3
    222c:	60 e0       	ldi	r22, 0x00	; 0
    222e:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_moveCursor>
				result = Claculation(num1, num2, operator);
    2232:	80 91 a1 00 	lds	r24, 0x00A1
    2236:	90 91 a2 00 	lds	r25, 0x00A2
    223a:	20 91 9f 00 	lds	r18, 0x009F
    223e:	30 91 a0 00 	lds	r19, 0x00A0
    2242:	b9 01       	movw	r22, r18
    2244:	4c 89       	ldd	r20, Y+20	; 0x14
    2246:	0e 94 05 06 	call	0xc0a	; 0xc0a <Claculation>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	8f 87       	std	Y+15, r24	; 0x0f
    2250:	98 8b       	std	Y+16, r25	; 0x10
    2252:	a9 8b       	std	Y+17, r26	; 0x11
    2254:	ba 8b       	std	Y+18, r27	; 0x12
				Result_Display(result);
    2256:	8f 85       	ldd	r24, Y+15	; 0x0f
    2258:	98 89       	ldd	r25, Y+16	; 0x10
    225a:	a9 89       	ldd	r26, Y+17	; 0x11
    225c:	ba 89       	ldd	r27, Y+18	; 0x12
    225e:	bc 01       	movw	r22, r24
    2260:	cd 01       	movw	r24, r26
    2262:	0e 94 be 05 	call	0xb7c	; 0xb7c <Result_Display>
				key_flag++;
    2266:	8b 89       	ldd	r24, Y+19	; 0x13
    2268:	8f 5f       	subi	r24, 0xFF	; 255
    226a:	8b 8b       	std	Y+19, r24	; 0x13
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	aa ef       	ldi	r26, 0xFA	; 250
    2272:	b3 e4       	ldi	r27, 0x43	; 67
    2274:	8b 87       	std	Y+11, r24	; 0x0b
    2276:	9c 87       	std	Y+12, r25	; 0x0c
    2278:	ad 87       	std	Y+13, r26	; 0x0d
    227a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    227c:	6b 85       	ldd	r22, Y+11	; 0x0b
    227e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2280:	8d 85       	ldd	r24, Y+13	; 0x0d
    2282:	9e 85       	ldd	r25, Y+14	; 0x0e
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	4a e7       	ldi	r20, 0x7A	; 122
    228a:	53 e4       	ldi	r21, 0x43	; 67
    228c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	8f 83       	std	Y+7, r24	; 0x07
    2296:	98 87       	std	Y+8, r25	; 0x08
    2298:	a9 87       	std	Y+9, r26	; 0x09
    229a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    229c:	6f 81       	ldd	r22, Y+7	; 0x07
    229e:	78 85       	ldd	r23, Y+8	; 0x08
    22a0:	89 85       	ldd	r24, Y+9	; 0x09
    22a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	40 e8       	ldi	r20, 0x80	; 128
    22aa:	5f e3       	ldi	r21, 0x3F	; 63
    22ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22b0:	88 23       	and	r24, r24
    22b2:	2c f4       	brge	.+10     	; 0x22be <main+0x34c>
		__ticks = 1;
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	9e 83       	std	Y+6, r25	; 0x06
    22ba:	8d 83       	std	Y+5, r24	; 0x05
    22bc:	3f c0       	rjmp	.+126    	; 0x233c <main+0x3ca>
	else if (__tmp > 65535)
    22be:	6f 81       	ldd	r22, Y+7	; 0x07
    22c0:	78 85       	ldd	r23, Y+8	; 0x08
    22c2:	89 85       	ldd	r24, Y+9	; 0x09
    22c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	3f ef       	ldi	r19, 0xFF	; 255
    22ca:	4f e7       	ldi	r20, 0x7F	; 127
    22cc:	57 e4       	ldi	r21, 0x47	; 71
    22ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22d2:	18 16       	cp	r1, r24
    22d4:	4c f5       	brge	.+82     	; 0x2328 <main+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22da:	8d 85       	ldd	r24, Y+13	; 0x0d
    22dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	40 e2       	ldi	r20, 0x20	; 32
    22e4:	51 e4       	ldi	r21, 0x41	; 65
    22e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	bc 01       	movw	r22, r24
    22f0:	cd 01       	movw	r24, r26
    22f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	9e 83       	std	Y+6, r25	; 0x06
    22fc:	8d 83       	std	Y+5, r24	; 0x05
    22fe:	0f c0       	rjmp	.+30     	; 0x231e <main+0x3ac>
    2300:	89 e1       	ldi	r24, 0x19	; 25
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	9c 83       	std	Y+4, r25	; 0x04
    2306:	8b 83       	std	Y+3, r24	; 0x03
    2308:	8b 81       	ldd	r24, Y+3	; 0x03
    230a:	9c 81       	ldd	r25, Y+4	; 0x04
    230c:	01 97       	sbiw	r24, 0x01	; 1
    230e:	f1 f7       	brne	.-4      	; 0x230c <main+0x39a>
    2310:	9c 83       	std	Y+4, r25	; 0x04
    2312:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2314:	8d 81       	ldd	r24, Y+5	; 0x05
    2316:	9e 81       	ldd	r25, Y+6	; 0x06
    2318:	01 97       	sbiw	r24, 0x01	; 1
    231a:	9e 83       	std	Y+6, r25	; 0x06
    231c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    231e:	8d 81       	ldd	r24, Y+5	; 0x05
    2320:	9e 81       	ldd	r25, Y+6	; 0x06
    2322:	00 97       	sbiw	r24, 0x00	; 0
    2324:	69 f7       	brne	.-38     	; 0x2300 <main+0x38e>
    2326:	32 ce       	rjmp	.-924    	; 0x1f8c <main+0x1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2328:	6f 81       	ldd	r22, Y+7	; 0x07
    232a:	78 85       	ldd	r23, Y+8	; 0x08
    232c:	89 85       	ldd	r24, Y+9	; 0x09
    232e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	9e 83       	std	Y+6, r25	; 0x06
    233a:	8d 83       	std	Y+5, r24	; 0x05
    233c:	8d 81       	ldd	r24, Y+5	; 0x05
    233e:	9e 81       	ldd	r25, Y+6	; 0x06
    2340:	9a 83       	std	Y+2, r25	; 0x02
    2342:	89 83       	std	Y+1, r24	; 0x01
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	9a 81       	ldd	r25, Y+2	; 0x02
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	f1 f7       	brne	.-4      	; 0x2348 <main+0x3d6>
    234c:	9a 83       	std	Y+2, r25	; 0x02
    234e:	89 83       	std	Y+1, r24	; 0x01
    2350:	1d ce       	rjmp	.-966    	; 0x1f8c <main+0x1a>

00002352 <__udivmodhi4>:
    2352:	aa 1b       	sub	r26, r26
    2354:	bb 1b       	sub	r27, r27
    2356:	51 e1       	ldi	r21, 0x11	; 17
    2358:	07 c0       	rjmp	.+14     	; 0x2368 <__udivmodhi4_ep>

0000235a <__udivmodhi4_loop>:
    235a:	aa 1f       	adc	r26, r26
    235c:	bb 1f       	adc	r27, r27
    235e:	a6 17       	cp	r26, r22
    2360:	b7 07       	cpc	r27, r23
    2362:	10 f0       	brcs	.+4      	; 0x2368 <__udivmodhi4_ep>
    2364:	a6 1b       	sub	r26, r22
    2366:	b7 0b       	sbc	r27, r23

00002368 <__udivmodhi4_ep>:
    2368:	88 1f       	adc	r24, r24
    236a:	99 1f       	adc	r25, r25
    236c:	5a 95       	dec	r21
    236e:	a9 f7       	brne	.-22     	; 0x235a <__udivmodhi4_loop>
    2370:	80 95       	com	r24
    2372:	90 95       	com	r25
    2374:	bc 01       	movw	r22, r24
    2376:	cd 01       	movw	r24, r26
    2378:	08 95       	ret

0000237a <__prologue_saves__>:
    237a:	2f 92       	push	r2
    237c:	3f 92       	push	r3
    237e:	4f 92       	push	r4
    2380:	5f 92       	push	r5
    2382:	6f 92       	push	r6
    2384:	7f 92       	push	r7
    2386:	8f 92       	push	r8
    2388:	9f 92       	push	r9
    238a:	af 92       	push	r10
    238c:	bf 92       	push	r11
    238e:	cf 92       	push	r12
    2390:	df 92       	push	r13
    2392:	ef 92       	push	r14
    2394:	ff 92       	push	r15
    2396:	0f 93       	push	r16
    2398:	1f 93       	push	r17
    239a:	cf 93       	push	r28
    239c:	df 93       	push	r29
    239e:	cd b7       	in	r28, 0x3d	; 61
    23a0:	de b7       	in	r29, 0x3e	; 62
    23a2:	ca 1b       	sub	r28, r26
    23a4:	db 0b       	sbc	r29, r27
    23a6:	0f b6       	in	r0, 0x3f	; 63
    23a8:	f8 94       	cli
    23aa:	de bf       	out	0x3e, r29	; 62
    23ac:	0f be       	out	0x3f, r0	; 63
    23ae:	cd bf       	out	0x3d, r28	; 61
    23b0:	09 94       	ijmp

000023b2 <__epilogue_restores__>:
    23b2:	2a 88       	ldd	r2, Y+18	; 0x12
    23b4:	39 88       	ldd	r3, Y+17	; 0x11
    23b6:	48 88       	ldd	r4, Y+16	; 0x10
    23b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    23ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    23bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    23be:	8c 84       	ldd	r8, Y+12	; 0x0c
    23c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    23c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    23c4:	b9 84       	ldd	r11, Y+9	; 0x09
    23c6:	c8 84       	ldd	r12, Y+8	; 0x08
    23c8:	df 80       	ldd	r13, Y+7	; 0x07
    23ca:	ee 80       	ldd	r14, Y+6	; 0x06
    23cc:	fd 80       	ldd	r15, Y+5	; 0x05
    23ce:	0c 81       	ldd	r16, Y+4	; 0x04
    23d0:	1b 81       	ldd	r17, Y+3	; 0x03
    23d2:	aa 81       	ldd	r26, Y+2	; 0x02
    23d4:	b9 81       	ldd	r27, Y+1	; 0x01
    23d6:	ce 0f       	add	r28, r30
    23d8:	d1 1d       	adc	r29, r1
    23da:	0f b6       	in	r0, 0x3f	; 63
    23dc:	f8 94       	cli
    23de:	de bf       	out	0x3e, r29	; 62
    23e0:	0f be       	out	0x3f, r0	; 63
    23e2:	cd bf       	out	0x3d, r28	; 61
    23e4:	ed 01       	movw	r28, r26
    23e6:	08 95       	ret

000023e8 <itoa>:
    23e8:	fb 01       	movw	r30, r22
    23ea:	9f 01       	movw	r18, r30
    23ec:	e8 94       	clt
    23ee:	42 30       	cpi	r20, 0x02	; 2
    23f0:	c4 f0       	brlt	.+48     	; 0x2422 <itoa+0x3a>
    23f2:	45 32       	cpi	r20, 0x25	; 37
    23f4:	b4 f4       	brge	.+44     	; 0x2422 <itoa+0x3a>
    23f6:	4a 30       	cpi	r20, 0x0A	; 10
    23f8:	29 f4       	brne	.+10     	; 0x2404 <itoa+0x1c>
    23fa:	97 fb       	bst	r25, 7
    23fc:	1e f4       	brtc	.+6      	; 0x2404 <itoa+0x1c>
    23fe:	90 95       	com	r25
    2400:	81 95       	neg	r24
    2402:	9f 4f       	sbci	r25, 0xFF	; 255
    2404:	64 2f       	mov	r22, r20
    2406:	77 27       	eor	r23, r23
    2408:	0e 94 a9 11 	call	0x2352	; 0x2352 <__udivmodhi4>
    240c:	80 5d       	subi	r24, 0xD0	; 208
    240e:	8a 33       	cpi	r24, 0x3A	; 58
    2410:	0c f0       	brlt	.+2      	; 0x2414 <itoa+0x2c>
    2412:	89 5d       	subi	r24, 0xD9	; 217
    2414:	81 93       	st	Z+, r24
    2416:	cb 01       	movw	r24, r22
    2418:	00 97       	sbiw	r24, 0x00	; 0
    241a:	a1 f7       	brne	.-24     	; 0x2404 <itoa+0x1c>
    241c:	16 f4       	brtc	.+4      	; 0x2422 <itoa+0x3a>
    241e:	5d e2       	ldi	r21, 0x2D	; 45
    2420:	51 93       	st	Z+, r21
    2422:	10 82       	st	Z, r1
    2424:	c9 01       	movw	r24, r18
    2426:	0c 94 15 12 	jmp	0x242a	; 0x242a <strrev>

0000242a <strrev>:
    242a:	dc 01       	movw	r26, r24
    242c:	fc 01       	movw	r30, r24
    242e:	67 2f       	mov	r22, r23
    2430:	71 91       	ld	r23, Z+
    2432:	77 23       	and	r23, r23
    2434:	e1 f7       	brne	.-8      	; 0x242e <strrev+0x4>
    2436:	32 97       	sbiw	r30, 0x02	; 2
    2438:	04 c0       	rjmp	.+8      	; 0x2442 <strrev+0x18>
    243a:	7c 91       	ld	r23, X
    243c:	6d 93       	st	X+, r22
    243e:	70 83       	st	Z, r23
    2440:	62 91       	ld	r22, -Z
    2442:	ae 17       	cp	r26, r30
    2444:	bf 07       	cpc	r27, r31
    2446:	c8 f3       	brcs	.-14     	; 0x243a <strrev+0x10>
    2448:	08 95       	ret

0000244a <_exit>:
    244a:	f8 94       	cli

0000244c <__stop_program>:
    244c:	ff cf       	rjmp	.-2      	; 0x244c <__stop_program>
